// DOTFONT v0_3
// GPLv2
// (c) 2012 TakeItAndRun
//
// v0_2: 
//		optimize for thingiverse customizer
// v0_3: 
// 	adding a sign body
// 
//

//*******************************************************
//
// DOTFONT
//
//*******************************************************



//*******************************************************
//
// basic definitions
//
//*******************************************************


// small displacement to avoid parallel faces with zero volume
e=+0.02;

// unit vectors
xaxis=[1,0,0];
yaxis=[0,1,0];
zaxis=[0,0,1];

//*******************************************************
//
// dimensions
//
//*******************************************************


// Text (Only use Capitals!)
word = "HELLO WORLD";
str=word;


//radius (diagonal) of the dots
rdot0=1.0;
rdot=rdot0+e;
//number of corners of the dots
fn=8;//[3:32]
//height of type
h=1;//[.1:10]
//conical shape
pq=40;//[0:100]
q=pq/100;
//spacing of the dots in x-direction
sdotx=1;
//spacing of the dots in y-direction
sdoty=1;
//spacing between letters
dpos=1;
// height of font in dots
hdots=+7;
// spacing between lines
dposy=+4;

/* [sign] */
// sign
sign=!false;//[false:none,true:sign]
//length past type
dsx=4;//[3:10]
//height above type
dsy=3;//[3:10]
sy=(2*dsy+hdots)*sdoty;
//thickness of the sign
sz=1;

//*******************************************************
//
// bitmap of the font
//
//*******************************************************

fo=
[
[
[0,0,0,0,0],
[0,0,0,0,0],
[0,0,0,0,0],
[0,0,0,0,0],
[0,0,0,0,0],
[0,0,0,0,0],
[0,0,0,0,0],
],[
[0,1,1,0],
[1,0,0,1],
[1,0,0,1],
[1,1,1,1],
[1,0,0,1],
[1,0,0,1],
[1,0,0,1],
],[
[1,1,1,0],
[1,0,0,1],
[1,0,0,1],
[1,1,1,0],
[1,0,0,1],
[1,0,0,1],
[1,1,1,0],
],[
[0,1,1,0],
[1,0,0,1],
[1,0,0,0],
[1,0,0,0],
[1,0,0,0],
[1,0,0,1],
[0,1,1,0],
],[
[1,1,1,0],
[1,0,0,1],
[1,0,0,1],
[1,0,0,1],
[1,0,0,1],
[1,0,0,1],
[1,1,1,0],
],[
[1,1,1,1],
[1,0,0,0],
[1,0,0,0],
[1,1,1,0],
[1,0,0,0],
[1,0,0,0],
[1,1,1,1],
],[
[1,1,1,1],
[1,0,0,0],
[1,0,0,0],
[1,1,1,0],
[1,0,0,0],
[1,0,0,0],
[1,0,0,0],
],[
[0,1,1,0],
[1,0,0,1],
[1,0,0,0],
[1,0,1,1],
[1,0,0,1],
[1,0,0,1],
[0,1,1,0],
],[
[1,0,0,1],
[1,0,0,1],
[1,0,0,1],
[1,1,1,1],
[1,0,0,1],
[1,0,0,1],
[1,0,0,1],
],[
[1,1,1],
[0,1,0],
[0,1,0],
[0,1,0],
[0,1,0],
[0,1,0],
[1,1,1],
],[
[0,0,1],
[0,0,1],
[0,0,1],
[0,0,1],
[0,0,1],
[0,0,1],
[1,1,0],
],[
[1,0,0,0,1],
[1,0,0,1,0],
[1,0,1,0,0],
[1,1,0,0,0],
[1,0,1,0,0],
[1,0,0,1,0],
[1,0,0,0,1],
],[
[1,0,0,0],
[1,0,0,0],
[1,0,0,0],
[1,0,0,0],
[1,0,0,0],
[1,0,0,0],
[1,1,1,1],
],[
[1,0,0,0,1],
[1,1,0,1,1],
[1,0,1,0,1],
[1,0,0,0,1],
[1,0,0,0,1],
[1,0,0,0,1],
[1,0,0,0,1],
],[
[1,0,0,0,1],
[1,0,0,0,1],
[1,1,0,0,1],
[1,0,1,0,1],
[1,0,0,1,1],
[1,0,0,0,1],
[1,0,0,0,1],
],[
[0,1,1,1,0],
[1,0,0,0,1],
[1,0,0,0,1],
[1,0,0,0,1],
[1,0,0,0,1],
[1,0,0,0,1],
[0,1,1,1,0],
],[
[1,1,1,0],
[1,0,0,1],
[1,0,0,1],
[1,1,1,0],
[1,0,0,0],
[1,0,0,0],
[1,0,0,0],
],[
[0,1,1,1,0],
[1,0,0,0,1],
[1,0,0,0,1],
[1,0,0,0,1],
[1,0,0,0,1],
[1,0,0,1,0],
[0,1,1,0,1],
],[
[1,1,1,0],
[1,0,0,1],
[1,0,0,1],
[1,1,1,0],
[1,1,0,0],
[1,0,1,0],
[1,0,0,1],
],[
[0,1,1,0],
[1,0,0,1],
[1,0,0,0],
[0,1,1,0],
[0,0,0,1],
[1,0,0,1],
[0,1,1,0],
],[
[1,1,1,1,1],
[0,0,1,0,0],
[0,0,1,0,0],
[0,0,1,0,0],
[0,0,1,0,0],
[0,0,1,0,0],
[0,0,1,0,0],
],[
[1,0,0,1],
[1,0,0,1],
[1,0,0,1],
[1,0,0,1],
[1,0,0,1],
[1,0,0,1],
[0,1,1,0],
],[
[1,0,0,0,1],
[1,0,0,0,1],
[1,0,0,0,1],
[1,0,0,0,1],
[1,0,0,0,1],
[0,1,0,1,0],
[0,0,1,0,0],
],[
[1,0,0,0,1],
[1,0,0,0,1],
[1,0,0,0,1],
[1,0,0,0,1],
[1,0,1,0,1],
[1,1,0,1,1],
[1,0,0,0,1],
],[
[1,0,0,0,1],
[1,0,0,0,1],
[0,1,0,1,0],
[0,0,1,0,0],
[0,1,0,1,0],
[1,0,0,0,1],
[1,0,0,0,1],
],[
[1,0,0,0,1],
[1,0,0,0,1],
[0,1,0,1,0],
[0,0,1,0,0],
[0,0,1,0,0],
[0,0,1,0,0],
[0,0,1,0,0],
],[
[1,1,1,1,1],
[0,0,0,0,1],
[0,0,0,1,0],
[0,0,1,0,0],
[0,1,0,0,0],
[1,0,0,0,0],
[1,1,1,1,1],
],[
[0,1],
[1,1],
[0,1],
[0,1],
[0,1],
[0,1],
[0,1],
],[
[0,1,1,0],
[1,0,0,1],
[0,0,0,1],
[0,0,1,0],
[0,1,0,0],
[1,0,0,0],
[1,1,1,1],
],[
[0,1,1,0],
[1,0,0,1],
[0,0,0,1],
[0,0,1,0],
[0,0,0,1],
[1,0,0,1],
[0,1,1,0],
],[
[0,0,0,1,0],
[0,0,1,1,0],
[0,1,0,1,0],
[1,1,1,1,1],
[0,0,0,1,0],
[0,0,0,1,0],
[0,0,0,1,0],
],[
[1,1,1,1],
[1,0,0,0],
[1,0,0,0],
[1,1,1,0],
[0,0,0,1],
[1,0,0,1],
[0,1,1,0],
],[
[0,1,1,0],
[1,0,0,1],
[1,0,0,0],
[1,1,1,0],
[1,0,0,1],
[1,0,0,1],
[0,1,1,0],
],[
[1,1,1,1],
[0,0,0,1],
[0,0,0,1],
[0,0,1,0],
[0,1,0,0],
[1,0,0,0],
[1,0,0,0],
],[
[0,1,1,0],
[1,0,0,1],
[1,0,0,1],
[0,1,1,0],
[1,0,0,1],
[1,0,0,1],
[0,1,1,0],
],[
[0,1,1,0],
[1,0,0,1],
[1,0,0,1],
[0,1,1,1],
[0,0,0,1],
[1,0,0,1],
[0,1,1,0],
],[
[0,1,1,0],
[1,0,0,1],
[1,0,0,1],
[1,0,0,1],
[1,0,0,1],
[1,0,0,1],
[0,1,1,0],
],[
[0],
[0],
[0],
[0],
[0],
[0],
[1],
],[
[0],
[0],
[0],
[1],
[0],
[0],
[1],
],[
[1],
[1],
[1],
[1],
[1],
[0],
[1],
],[
[1],
[1],
[0],
[0],
[0],
[0],
[0],
],[
[0,1,1,1,0],
[1,0,0,0,0],
[0,1,1,1,0],
[1,0,0,0,1],
[0,1,1,1,0],
[0,0,0,0,1],
[0,1,1,1,0],
],[
[0,0,1,0,0],
[0,1,1,1,0],
[1,0,1,0,0],
[0,1,1,1,0],
[0,0,1,0,1],
[0,1,1,1,0],
[0,0,1,0,0],
],[
[0,1,0,0,0,1,0],
[1,0,1,0,0,1,0],
[0,1,0,0,1,0,0],
[0,0,0,1,0,0,0],
[0,0,1,0,0,1,0],
[0,1,0,0,1,0,1],
[0,1,0,0,0,1,0],
],[
[0,1,1,0,0,0,0],
[1,0,0,1,0,0,0],
[0,1,1,0,0,0,0],
[0,1,1,1,0,1,0],
[1,0,0,0,1,0,0],
[1,0,0,0,1,0,0],
[0,1,1,1,0,1,1],
],[
[0,0,0,0,1],
[0,0,0,0,1],
[0,0,0,1,0],
[0,0,1,0,0],
[0,1,0,0,0],
[1,0,0,0,0],
[1,0,0,0,0],
],[
[0,0,1],
[0,1,0],
[1,0,0],
[1,0,0],
[1,0,0],
[0,1,0],
[0,0,1],
],[
[1,0,0],
[0,1,0],
[0,0,1],
[0,0,1],
[0,0,1],
[0,1,0],
[1,0,0],
],[
[0,0,0,0],
[0,0,0,0],
[1,1,1,1],
[0,0,0,0],
[1,1,1,1],
[0,0,0,0],
[0,0,0,0],
],[
[0,1,1,1,0],
[1,0,0,0,1],
[0,0,0,0,1],
[0,0,0,1,0],
[0,0,1,0,0],
[0,0,0,0,0],
[0,0,1,0,0],
],[
[0,0,0,0,0],
[0,0,1,0,0],
[0,0,1,0,0],
[1,1,1,1,1],
[0,0,1,0,0],
[0,0,1,0,0],
[0,0,0,0,0],
],[
[0,0,0,0,0],
[0,0,0,0,0],
[0,0,0,0,0],
[1,1,1,1,1],
[0,0,0,0,0],
[0,0,0,0,0],
[0,0,0,0,0],
],[
[0,0,0,1],
[0,0,1,0],
[0,1,0,0],
[1,0,0,0],
[0,1,0,0],
[0,0,1,0],
[0,0,0,1],
],[
[1,0,0,0],
[0,1,0,0],
[0,0,1,0],
[0,0,0,1],
[0,0,1,0],
[0,1,0,0],
[1,0,0,0],

]
];

str0=" ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890.:!'ยง$%&/()=?+-<>";

sx=(2*dsx)*sdotx+(pos(len(str),str)-dpos)*sdotx;

//*******************************************************
//
// routines
//
//*******************************************************


module type(str,center=false){
	if(center)translate(-(pos(len(str),str)-dpos)*sdotx/2*xaxis-hdots/2*sdoty*yaxis)
		for(k=[0:len(str)-1]){
			translate(pos(k,str)*sdotx*xaxis)
				letter(value(str[k]));
		}
}
	
module letter(s){
	for(i=[0:len(fo[s])-1]){
		translate((len(fo[s])-1-i)*sdoty*yaxis)
		for(j=[0:len(fo[s][i])-1])
			if(fo[s][i][j]==1)
				translate(j*sdotx*xaxis)dot();
	}
}

module dot(){
	translate([sdotx/2,sdoty/2])
	scale([sdotx,sdoty])
	rotate(180/fn)
	cylinder(h=h,r1=(1+q)*rdot/2/cos(180/fn),r2=(1-q)*rdot/2/cos(180/fn),$fn=fn);
}

module cdot(){
	translate(-sdotx/2*xaxis-sdoty/2*yaxis)
		dot();
}

// return index of a letter in the fo bitmap vector
function value(str)=
	search(str,str0)[0];

// Calculate the position of the i-th letter as sum of the
// width plus spacing of all the letters before it.
// This function looks so witty because OpenSCAD does not
// allow re-assignment of variables during run time.
// The idea for this function (somewhat simplified) I took from
// http://www.thingiverse.com/thing:22730
// by Bernhard -HotKey- Slawik, http://www.bernhardslawik.de
function pos(i,str)=
	(i==0)?0:i*dpos
	+((i>=1)?len(fo[value(str[0])][0]):0)
	+((i>=2)?len(fo[value(str[1])][0]):0)
	+((i>=3)?len(fo[value(str[2])][0]):0)
	+((i>=4)?len(fo[value(str[3])][0]):0)
	+((i>=5)?len(fo[value(str[4])][0]):0)
	+((i>=6)?len(fo[value(str[5])][0]):0)
	+((i>=7)?len(fo[value(str[6])][0]):0)
	+((i>=8)?len(fo[value(str[7])][0]):0)
	+((i>=9)?len(fo[value(str[8])][0]):0)
	+((i>=10)?len(fo[value(str[9])][0]):0)
	+((i>=11)?len(fo[value(str[10])][0]):0)
	+((i>=12)?len(fo[value(str[11])][0]):0)
	+((i>=13)?len(fo[value(str[12])][0]):0)
	+((i>=14)?len(fo[value(str[13])][0]):0)
	+((i>=15)?len(fo[value(str[14])][0]):0)
	+((i>=16)?len(fo[value(str[15])][0]):0)
	+((i>=17)?len(fo[value(str[16])][0]):0)
	+((i>=18)?len(fo[value(str[17])][0]):0)
	+((i>=19)?len(fo[value(str[18])][0]):0)
	+((i>=20)?len(fo[value(str[19])][0]):0)
	+((i>=21)?len(fo[value(str[20])][0]):0)
	+((i>=22)?len(fo[value(str[21])][0]):0)
	+((i>=23)?len(fo[value(str[22])][0]):0)
	+((i>=24)?len(fo[value(str[23])][0]):0)
	+((i>=25)?len(fo[value(str[24])][0]):0)
	+((i>=26)?len(fo[value(str[25])][0]):0)
	+((i>=27)?len(fo[value(str[26])][0]):0)
	+((i>=28)?len(fo[value(str[27])][0]):0)
	+((i>=29)?len(fo[value(str[28])][0]):0)
	+((i>=30)?len(fo[value(str[29])][0]):0)
	+((i>=31)?len(fo[value(str[30])][0]):0)
	+((i>=32)?len(fo[value(str[31])][0]):0)
	+((i>=33)?len(fo[value(str[32])][0]):0)
	+((i>=34)?len(fo[value(str[33])][0]):0)
	+((i>=35)?len(fo[value(str[34])][0]):0)
	+((i>=36)?len(fo[value(str[35])][0]):0)
	+((i>=37)?len(fo[value(str[36])][0]):0)
	+((i>=38)?len(fo[value(str[37])][0]):0)
	+((i>=39)?len(fo[value(str[38])][0]):0)
	+((i>=40)?len(fo[value(str[39])][0]):0)
	+((i>=41)?len(fo[value(str[40])][0]):0)
	+((i>=42)?len(fo[value(str[41])][0]):0)
	+((i>=43)?len(fo[value(str[42])][0]):0)
	+((i>=44)?len(fo[value(str[43])][0]):0)
	+((i>=45)?len(fo[value(str[44])][0]):0)
	+((i>=46)?len(fo[value(str[45])][0]):0)
	+((i>=47)?len(fo[value(str[46])][0]):0)
	+((i>=48)?len(fo[value(str[47])][0]):0)
	+((i>=49)?len(fo[value(str[48])][0]):0)
	+((i>=50)?len(fo[value(str[49])][0]):0)
	+((i>=51)?len(fo[value(str[50])][0]):0)
	+((i>=52)?len(fo[value(str[51])][0]):0)
	+((i>=53)?len(fo[value(str[52])][0]):0)
	+((i>=54)?len(fo[value(str[53])][0]):0)
	+((i>=55)?len(fo[value(str[54])][0]):0)
	+((i>=56)?len(fo[value(str[55])][0]):0)
	+((i>=57)?len(fo[value(str[56])][0]):0)
	+((i>=58)?len(fo[value(str[57])][0]):0)
	+((i>=59)?len(fo[value(str[58])][0]):0)
	+((i>=60)?len(fo[value(str[59])][0]):0)
	+((i>=61)?len(fo[value(str[60])][0]):0)
	+((i>=62)?len(fo[value(str[61])][0]):0)
	+((i>=63)?len(fo[value(str[62])][0]):0)
	+((i>=64)?len(fo[value(str[63])][0]):0)
	+((i>=65)?len(fo[value(str[64])][0]):0)
	+((i>=66)?len(fo[value(str[65])][0]):0)
	+((i>=67)?len(fo[value(str[66])][0]):0)
	+((i>=68)?len(fo[value(str[67])][0]):0)
	+((i>=69)?len(fo[value(str[68])][0]):0)
	+((i>=70)?len(fo[value(str[69])][0]):0)
	+((i>=71)?len(fo[value(str[70])][0]):0)
;
	

//*******************************************************
//
// main program
//
//*******************************************************

module lazydog(){
	str1=["THE QUICK BROWN","FOX JUMBED OVER","THE LAZY DOG."];
	for(i=[0:len(str1)-1])
		translate(-i*((hdots+dposy)*sdoty)*yaxis)
			color("black")
				type(str1[i],true);
}


//lazydog();

if (sign)
	translate((sz-e)*zaxis)
color("yellow")
		type(str,true);

if (sign){
	translate(sz/2*zaxis)
color("blue")
		cube([sx,sy,sz],true);
color("yellow")
	translate((sz-e)*zaxis){
		for (i=[-1:2:1])
			translate(i*(sy/2-sdoty*1.5)*yaxis)
			hull(){
				translate((sx/2-sdotx*1.5)*xaxis)cdot();
				translate(-(sx/2-sdotx*1.5)*xaxis)cdot();
			}
		for (i=[-1:2:1])
			translate(i*(sx/2-sdotx*1.5)*xaxis)
			hull(){
				translate((sy/2-sdoty*1.5)*yaxis)cdot();
				translate(-(sy/2-sdoty*1.5)*yaxis)cdot();
			}
	}
	}
