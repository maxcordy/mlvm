// Customizable Pixel Beads Photo Panel
// preview[view:south, tilt:top];

/* [Image] */

// Picture is reduced to 40x40. You may wish to crop and resize it manually before uploading. Check "Invert Colors".
picture = [0.157,0.157,0.176,0.165,0.161,0.173,0.176,0.173,0.161,0.161,0.165,0.184,0.176,0.176,0.161,0.165,0.129,0.145,0.145,0.106,0.157,0.161,0.173,0.169,0.149,0.161,0.165,0.169,0.161,0.176,0.200,0.188,0.184,0.184,0.180,0.180,0.192,0.200,0.200,0.196,0.161,0.161,0.141,0.180,0.157,0.145,0.165,0.145,0.157,0.125,0.153,0.184,0.129,0.137,0.224,0.353,0.557,0.596,0.671,0.655,0.525,0.263,0.157,0.180,0.149,0.180,0.141,0.169,0.165,0.165,0.169,0.173,0.173,0.188,0.188,0.192,0.192,0.180,0.176,0.200,0.020,0.059,0.027,0.024,0.000,0.012,0.051,0.137,0.141,0.176,0.098,0.114,0.322,0.655,0.859,0.914,0.945,0.933,0.973,0.976,1.000,0.996,0.890,0.573,0.188,0.165,0.212,0.212,0.153,0.149,0.176,0.165,0.153,0.169,0.165,0.173,0.184,0.165,0.161,0.196,0.012,0.004,0.000,0.000,0.008,0.008,0.000,0.125,0.141,0.075,0.239,0.702,0.910,0.804,0.894,0.929,0.957,0.976,0.961,0.922,0.914,0.914,0.941,0.980,0.871,0.251,0.239,0.224,0.157,0.176,0.145,0.141,0.149,0.165,0.145,0.145,0.173,0.169,0.157,0.176,0.016,0.000,0.000,0.008,0.012,0.000,0.000,0.098,0.075,0.318,0.965,0.922,0.894,0.863,0.831,0.937,0.886,0.894,0.925,0.957,0.957,0.973,0.961,0.906,0.953,0.835,0.698,0.678,0.549,0.243,0.133,0.176,0.141,0.165,0.157,0.145,0.161,0.169,0.157,0.153,0.004,0.000,0.008,0.020,0.000,0.000,0.043,0.039,0.337,0.973,0.937,0.925,0.882,0.914,0.894,0.812,0.855,0.945,0.929,0.922,0.941,0.914,0.882,0.961,0.929,0.976,0.945,0.882,0.792,0.725,0.369,0.129,0.122,0.137,0.157,0.153,0.145,0.157,0.161,0.153,0.004,0.016,0.000,0.000,0.004,0.020,0.008,0.216,0.992,0.941,0.929,0.863,0.882,0.843,0.867,0.910,0.957,0.969,0.961,0.953,0.906,0.937,0.945,0.933,0.945,0.973,0.945,0.941,0.886,0.878,0.694,0.412,0.173,0.125,0.129,0.149,0.137,0.141,0.157,0.145,0.008,0.008,0.000,0.000,0.012,0.008,0.012,0.847,0.937,0.937,0.941,0.949,0.925,0.937,0.847,0.812,0.827,0.839,0.859,0.914,0.898,0.937,0.929,0.906,0.890,0.914,0.965,0.980,0.886,0.831,0.941,0.635,0.286,0.157,0.118,0.149,0.141,0.141,0.149,0.122,0.000,0.000,0.000,0.004,0.004,0.020,0.357,0.992,0.933,0.945,0.937,0.957,0.965,0.961,0.976,0.961,0.945,0.933,0.929,0.922,0.898,0.843,0.792,0.765,0.737,0.776,0.914,0.984,1.000,0.824,0.878,0.922,0.557,0.169,0.114,0.141,0.122,0.137,0.145,0.137,0.000,0.027,0.000,0.004,0.024,0.008,0.902,0.965,0.965,0.969,0.957,0.969,0.973,0.949,0.937,0.906,0.902,0.890,0.855,0.824,0.761,0.725,0.698,0.686,0.686,0.706,0.863,0.925,0.961,0.871,0.906,0.949,0.902,0.353,0.122,0.145,0.145,0.122,0.125,0.125,0.000,0.000,0.020,0.012,0.004,0.502,1.000,0.969,0.929,0.941,0.933,0.965,0.980,0.965,0.949,0.910,0.878,0.812,0.698,0.643,0.569,0.592,0.584,0.580,0.604,0.635,0.820,0.914,0.945,0.914,0.898,0.914,0.984,0.627,0.149,0.118,0.129,0.118,0.141,0.129,0.000,0.000,0.012,0.016,0.024,0.945,0.945,0.961,0.929,0.937,0.941,0.957,0.953,0.910,0.878,0.831,0.686,0.620,0.510,0.471,0.392,0.463,0.514,0.565,0.600,0.635,0.780,0.890,0.918,0.925,0.929,0.949,0.937,0.933,0.259,0.110,0.122,0.118,0.133,0.122,0.004,0.027,0.000,0.008,0.106,0.973,0.973,0.941,0.933,0.957,0.953,0.945,0.890,0.796,0.718,0.659,0.545,0.459,0.365,0.376,0.333,0.416,0.467,0.514,0.549,0.612,0.729,0.878,0.910,0.910,0.945,0.961,0.941,1.000,0.388,0.094,0.137,0.114,0.114,0.129,0.004,0.000,0.000,0.004,0.165,0.973,0.925,0.937,0.933,0.949,0.925,0.886,0.788,0.655,0.553,0.475,0.420,0.337,0.271,0.286,0.259,0.345,0.420,0.463,0.525,0.612,0.710,0.863,0.929,0.914,0.941,0.941,0.949,0.969,0.553,0.094,0.129,0.129,0.122,0.125,0.000,0.000,0.024,0.000,0.196,0.957,0.945,0.929,0.969,0.937,0.843,0.741,0.620,0.486,0.404,0.341,0.247,0.243,0.271,0.286,0.267,0.376,0.529,0.592,0.631,0.675,0.714,0.784,0.898,0.933,0.961,0.984,0.969,0.973,0.631,0.118,0.125,0.133,0.122,0.110,0.004,0.000,0.000,0.016,0.016,0.933,0.953,0.941,0.961,0.878,0.725,0.592,0.467,0.376,0.337,0.310,0.345,0.325,0.373,0.435,0.529,0.686,0.780,0.741,0.647,0.663,0.694,0.710,0.859,0.937,0.925,0.949,0.953,0.969,0.510,0.086,0.118,0.110,0.102,0.125,0.004,0.016,0.000,0.004,0.008,0.753,0.953,0.961,0.992,0.710,0.624,0.616,0.549,0.506,0.549,0.439,0.420,0.443,0.396,0.533,0.612,0.702,0.565,0.475,0.541,0.561,0.592,0.682,0.796,0.980,0.941,0.949,0.937,0.965,0.180,0.067,0.125,0.125,0.102,0.125,0.004,0.004,0.000,0.027,0.000,0.412,0.957,0.961,0.941,0.678,0.651,0.624,0.757,0.757,0.741,0.655,0.545,0.514,0.541,0.569,0.639,0.533,0.322,0.306,0.482,0.514,0.631,0.592,0.753,0.902,0.945,0.949,0.949,0.808,0.055,0.122,0.086,0.086,0.133,0.098,0.004,0.016,0.024,0.000,0.016,0.255,0.941,0.992,0.878,0.620,0.616,0.525,0.384,0.380,0.478,0.624,0.624,0.518,0.584,0.596,0.616,0.545,0.608,0.671,0.678,0.694,0.420,0.522,0.627,0.694,1.000,0.937,0.957,0.843,0.051,0.114,0.098,0.106,0.133,0.098,0.020,0.004,0.000,0.012,0.000,0.000,0.941,0.996,0.898,0.529,0.522,0.424,0.373,0.353,0.486,0.565,0.498,0.498,0.380,0.510,0.541,0.749,0.690,0.769,0.639,0.651,0.514,0.541,0.518,0.733,0.965,0.918,0.835,0.780,0.082,0.075,0.114,0.114,0.086,0.098,0.000,0.000,0.008,0.000,0.020,0.024,0.898,0.969,0.918,0.635,0.506,0.631,0.749,0.902,0.820,0.773,0.506,0.671,0.424,0.682,0.580,0.451,0.525,0.533,0.588,0.529,0.427,0.475,0.522,0.608,0.957,0.855,0.706,0.475,0.059,0.098,0.118,0.098,0.094,0.106,0.000,0.020,0.000,0.016,0.000,0.000,0.886,0.769,0.722,0.478,0.518,0.561,0.565,0.529,0.537,0.482,0.518,0.749,0.325,0.490,0.616,0.329,0.384,0.384,0.341,0.239,0.306,0.424,0.482,0.475,0.796,0.906,0.718,0.306,0.063,0.098,0.110,0.102,0.110,0.110,0.000,0.000,0.000,0.004,0.000,0.000,0.604,0.996,0.961,0.486,0.459,0.561,0.569,0.588,0.522,0.392,0.510,0.557,0.329,0.325,0.392,0.541,0.451,0.427,0.416,0.416,0.463,0.510,0.467,0.522,0.678,0.910,0.749,0.290,0.082,0.059,0.086,0.098,0.094,0.090,0.004,0.031,0.016,0.004,0.004,0.004,0.251,0.969,0.988,0.498,0.447,0.333,0.373,0.396,0.443,0.447,0.498,0.345,0.278,0.302,0.416,0.408,0.608,0.643,0.620,0.588,0.482,0.545,0.561,0.561,0.584,0.784,0.733,0.251,0.086,0.098,0.102,0.102,0.114,0.094,0.055,0.043,0.047,0.035,0.027,0.000,0.059,0.282,1.000,0.498,0.451,0.475,0.478,0.494,0.588,0.659,0.475,0.380,0.396,0.349,0.490,0.380,0.502,0.631,0.647,0.608,0.569,0.553,0.557,0.600,0.553,0.639,0.729,0.224,0.082,0.114,0.075,0.098,0.086,0.094,0.047,0.039,0.055,0.063,0.063,0.051,0.024,0.027,0.753,0.537,0.502,0.533,0.557,0.580,0.612,0.682,0.467,0.471,0.518,0.533,0.553,0.655,0.678,0.569,0.573,0.686,0.624,0.565,0.592,0.612,0.549,0.588,0.290,0.102,0.098,0.106,0.078,0.098,0.086,0.098,0.067,0.047,0.047,0.047,0.024,0.055,0.063,0.000,0.498,0.588,0.459,0.545,0.620,0.624,0.702,0.580,0.663,0.733,0.733,0.659,0.741,0.714,0.659,0.604,0.588,0.635,0.647,0.604,0.604,0.624,0.573,0.522,0.035,0.063,0.090,0.082,0.094,0.110,0.082,0.094,0.035,0.035,0.039,0.067,0.035,0.031,0.071,0.012,0.259,0.584,0.545,0.584,0.592,0.675,0.616,0.553,0.565,0.600,0.624,0.678,0.616,0.569,0.541,0.604,0.647,0.655,0.698,0.541,0.557,0.600,0.565,0.478,0.051,0.106,0.086,0.075,0.106,0.090,0.075,0.102,0.043,0.051,0.031,0.063,0.067,0.039,0.043,0.012,0.118,0.537,0.533,0.533,0.553,0.722,0.643,0.596,0.518,0.616,0.663,0.663,0.635,0.635,0.635,0.667,0.957,0.624,0.596,0.565,0.545,0.537,0.620,0.333,0.063,0.098,0.086,0.094,0.098,0.063,0.078,0.110,0.055,0.082,0.047,0.035,0.059,0.067,0.063,0.063,0.035,0.059,0.510,0.561,0.557,0.604,0.643,0.816,0.894,0.655,0.549,0.463,0.463,0.420,0.596,0.722,0.549,0.549,0.557,0.537,0.561,0.561,0.624,0.161,0.071,0.090,0.086,0.090,0.086,0.078,0.094,0.086,0.024,0.043,0.059,0.043,0.059,0.067,0.047,0.059,0.035,0.004,0.369,0.553,0.549,0.529,0.608,0.486,0.620,0.675,0.580,0.537,0.573,0.596,0.522,0.545,0.518,0.533,0.514,0.557,0.565,0.569,0.525,0.078,0.094,0.094,0.082,0.071,0.086,0.106,0.086,0.071,0.055,0.004,0.008,0.008,0.012,0.024,0.000,0.008,0.027,0.020,0.047,0.541,0.541,0.557,0.510,0.490,0.490,0.502,0.537,0.537,0.533,0.545,0.573,0.549,0.510,0.525,0.494,0.561,0.631,0.588,0.306,0.047,0.063,0.075,0.082,0.067,0.086,0.090,0.063,0.090,0.024,0.004,0.000,0.000,0.004,0.000,0.004,0.012,0.020,0.020,0.008,0.306,0.525,0.576,0.529,0.482,0.478,0.553,0.588,0.608,0.647,0.631,0.561,0.522,0.435,0.475,0.576,0.569,0.604,0.557,0.224,0.059,0.063,0.071,0.059,0.086,0.059,0.075,0.078,0.090,0.024,0.004,0.000,0.000,0.004,0.000,0.004,0.012,0.016,0.004,0.035,0.035,0.475,0.525,0.569,0.482,0.447,0.451,0.455,0.447,0.420,0.408,0.400,0.392,0.431,0.506,0.616,0.592,0.592,0.573,0.239,0.047,0.098,0.094,0.082,0.086,0.071,0.067,0.067,0.078,0.024,0.004,0.000,0.000,0.004,0.000,0.004,0.008,0.008,0.024,0.071,0.016,0.106,0.588,0.549,0.573,0.424,0.361,0.373,0.416,0.416,0.439,0.471,0.455,0.573,0.596,0.627,0.584,0.553,0.576,0.255,0.035,0.075,0.071,0.071,0.067,0.094,0.086,0.071,0.071,0.027,0.008,0.000,0.000,0.004,0.000,0.004,0.008,0.008,0.016,0.043,0.063,0.035,0.420,0.537,0.561,0.588,0.518,0.494,0.518,0.541,0.584,0.639,0.655,0.631,0.612,0.588,0.561,0.533,0.580,0.282,0.063,0.055,0.071,0.067,0.047,0.090,0.082,0.086,0.067,0.027,0.012,0.000,0.000,0.000,0.000,0.004,0.004,0.008,0.024,0.075,0.094,0.082,0.306,0.522,0.561,0.580,0.616,0.635,0.639,0.643,0.620,0.608,0.624,0.592,0.600,0.588,0.569,0.533,0.569,0.255,0.020,0.047,0.071,0.078,0.055,0.071,0.051,0.078,0.059,0.027,0.012,0.004,0.000,0.000,0.000,0.004,0.004,0.012,0.035,0.055,0.075,0.067,0.212,0.529,0.506,0.537,0.596,0.604,0.592,0.616,0.612,0.600,0.627,0.604,0.620,0.596,0.553,0.541,0.569,0.271,0.027,0.071,0.043,0.051,0.071,0.071,0.051,0.075,0.063,0.027,0.016,0.004,0.000,0.000,0.004,0.004,0.004,0.020,0.051,0.118,0.082,0.106,0.071,0.518,0.514,0.529,0.569,0.596,0.608,0.624,0.620,0.600,0.588,0.596,0.596,0.561,0.522,0.533,0.569,0.424,0.333,0.380,0.161,0.047,0.075,0.071,0.075,0.067,0.071,0.027,0.016,0.008,0.000,0.000,0.004,0.004,0.004,0.008,0.086,0.067,0.055,0.114,0.706,0.463,0.510,0.541,0.537,0.573,0.573,0.525,0.522,0.553,0.557,0.553,0.557,0.565,0.533,0.518,0.522,0.545,0.675,0.820,0.404,0.098,0.059,0.043,0.075,0.055,0.063]; // [image_array:40x40]

panel_shape = 1; // [0:Square, 1:Circle]

// Border width relative to unit pixel size.
border_width = 1;

// Image thickness relative to unit pixel size.
thickness = 0.6;

/* [Pixels] */

// Circular and octangular pixels are slower to generate than diamonds.
pixel_shape = 4; // [4:Diamond, 8:Octagon, 16:Circle]

// Orientation of strands connecting pixels.
orientation = 1; // [0:Horizontal, 1:Vertical]

// The proportion of each pixel's width reserved for the support grid.
grid_size = 0.5;

// The proportion of each pixel's width used to represent variation between white and black pixel values. Pixel size and grid size do not necessarily have to add up to one; sums >1 allow overlap between neighboring strands, while values <1 ensure there is always a gap.
pixel_size = 0.7;

// Elongation is applied to pixel size along strands; it can yield more continuous shapes. Set to 0 to prevent overlap.
pixel_elongation = 1;

/* [Hidden] */

width = 40;
height = 40;
size = width * height;

function px(i) = i % width;
function py(i) = floor(i / width);
function pv(i) = (pixel_size * picture[i]) + grid_size;
function flipy(y) = height - 1 - y;

union() {
	
	intersection() {
		Image();
		Shape();
	}
	
	Border();
}


module Border() {
	difference() {
		Shape(border_width);
		translate([0, 0, -thickness/2]) scale([1, 1, 2]) Shape(0);
	}
}

// The image is clipped to this shape.
module Shape(padding=0) {
	if (panel_shape == 0) {
		translate([-padding, -padding, 0])
		cube([width-1+(padding*2), height-1+(padding*2), thickness]);
	}
	else {
		translate([(width-1)/2, (height-1)/2, 0])
		scale([width-1+(padding*2), height-1+(padding*2), 1])
		cylinder(r=0.5, h=thickness, $fn=30);
	}
}

// The image module combines the actual bitmap pixels with the support grid.
module Image() {
	union() {
		Bitmap();
		Grid(orientation);
	}
}

// The grid module defines a sequence of uniform size rectangular strips,
// intended as supports to ensure the bitmap pixels are located correctly.
// The boolean vertical parameter determines the strip orientation.
module Grid(vertical) {
	if (vertical == 1) {
		for (i = [0 : width - 1]) {
			translate([i - (grid_size/2), 0, 0])
			linear_extrude(height=thickness)
			square([grid_size, height-1]);
			//cube([grid_size, height-1, thickness]);
		}
	}
	else if (vertical == 0) {
		for (i = [0 : height - 1]) {
			translate([0, flipy(i) - (grid_size/2), 0])
			linear_extrude(height=thickness)
			square([width-1, grid_size]);
			//cube([width-1, grid_size, thickness]);
		}
	}
}

// The bitmap module iterates through every element in the picture array
// and uses the pixel module to draw a pixel object at each bitmap location.
// Pixel size is scaled in one dimension according to brightness.
// (Size may also be scaled in perpendicular direction along strands if elongation is nonzero.)
// (Bonus idea: instead of iterating through the picture array, let the user
// draw a path with a draw_polygon widget, then sample the bitmap at path point,
// and connect pixels with segments from drawn path instead of uniform grid.)
module Bitmap() {
	for (i = [0 : size-1]) {
        /*
		assign(x = px(i), y = flipy(py(i)), v = pv(i)) {
			Pixel(x, y,
					(orientation == 0 ? 1 + (pixel_elongation * v) : v),
					(orientation == 1  ? 1 + (pixel_elongation * v) : v));
		}
        */
        x = px(i);
        y = flipy(py(i));
        v = pv(i);
        Pixel(x, y,
					(orientation == 0 ? 1 + (pixel_elongation * v) : v),
					(orientation == 1  ? 1 + (pixel_elongation * v) : v));
	}
}

// The pixel module places a "pixel" shape centered at coordinates x, y.
// The pixel is scaled to width and height given by w, h.
module Pixel(x, y, w, h) {
	translate([x, y, 0])
	scale([w, h, 1])
	linear_extrude(height=thickness)
	// pixel is created with unit diameter to facilitate easy scaling
	circle(r=0.5, center=true, $fn = pixel_shape);
}
