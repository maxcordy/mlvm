CARD_SIZE_LONG_EDGE =91;
CARD_SIZE_SHORT_EDGE = 66;
CARD_STACK_HEIGHT = 20;
WALL_THICKNESS = 2;
TAB_THICKNESS = 10;
EXTRA_SPACE = .25;
// rounded cutouts remove a "circle" from the bottom surface, and a 1/2 "circle" from each short end of the bottom piece
/* [Cutouts] */
// Percent of card deck height to cutout
END_CUTOUT_HEIGHT_PERCENTAGE = 80; // [0:100]
// Percent of box width to cutout
END_CUTOUT_WIDTH_PERCENTAGE  = 67; // [0:100]
// Percent of box width to cutout
BOTTOM_CUTOUT_WIDTH_PERCENTAGE = 67; // [0:100]
// percent of box length to cutout
BOTTOM_CUTOUT_LENGTH_PERCENTAGE = 67; // [0:100]
// preview[view:south west, tilt:top diagonal]


CARD_LONG_EDGE = CARD_SIZE_LONG_EDGE + (WALL_THICKNESS*2);
CARD_SHORT_EDGE = CARD_SIZE_SHORT_EDGE + (WALL_THICKNESS*2);
ALL_EXTRA_SPACE = (EXTRA_SPACE *2);

LID_OUTSIDE_LONG_THICKNESS = CARD_LONG_EDGE + (WALL_THICKNESS*2);
LID_OUTSIDE_SHORT_THICKNESS = CARD_SHORT_EDGE + (WALL_THICKNESS*2);

SPACE_BETWEEN_BOTTOM_AND_LID = LID_OUTSIDE_LONG_THICKNESS + (WALL_THICKNESS*2)+ 2;

HEIGHT = CARD_STACK_HEIGHT + WALL_THICKNESS;

// rounded cut-outs
// ends
END_CUTOUT_LENGTH = CARD_LONG_EDGE + 2;
END_CUTOUT_RADIUS = CARD_STACK_HEIGHT * END_CUTOUT_HEIGHT_PERCENTAGE/100;
END_CUTOUT_WIDTH  = CARD_SIZE_SHORT_EDGE * END_CUTOUT_WIDTH_PERCENTAGE/100;
// since we'll be scaling our cylinder, we really need the ratio to scale by for the longer dimension, not the direct dimension itself
END_CUTOUT_WIDTH_RATIO = END_CUTOUT_WIDTH / (END_CUTOUT_RADIUS*2);
// bottom
BOTTOM_CUTOUT_LENGTH = (WALL_THICKNESS * 2)+ 2;
BOTTOM_CUTOUT_RADIUS = CARD_SIZE_SHORT_EDGE * BOTTOM_CUTOUT_WIDTH_PERCENTAGE / 2 /100;
BOTTOM_CUTOUT_HEIGHT = CARD_SIZE_LONG_EDGE * BOTTOM_CUTOUT_LENGTH_PERCENTAGE/100;
// since we'll be scaling our cylinder, we really need the ratio to scale by for the longer dimension, not the direct dimension itself
BOTTOM_CUTOUT_HEIGHT_RATIO = BOTTOM_CUTOUT_HEIGHT / (BOTTOM_CUTOUT_RADIUS*2);


	//*Start Bottom of Box

					//*Start wedge 1
translate ([((CARD_LONG_EDGE/2) -(TAB_THICKNESS/2)),-WALL_THICKNESS-EXTRA_SPACE,HEIGHT-WALL_THICKNESS-1-EXTRA_SPACE]) 

difference (){
cube ([TAB_THICKNESS,WALL_THICKNESS+EXTRA_SPACE,WALL_THICKNESS+EXTRA_SPACE]);
translate ([0, WALL_THICKNESS+(EXTRA_SPACE),0]) rotate ([135,0,0])  

cube ([(TAB_THICKNESS+3), sqrt(((WALL_THICKNESS+EXTRA_SPACE)*(WALL_THICKNESS+EXTRA_SPACE))+((WALL_THICKNESS+EXTRA_SPACE)*(WALL_THICKNESS+EXTRA_SPACE))), sqrt(((WALL_THICKNESS+EXTRA_SPACE)*(WALL_THICKNESS+EXTRA_SPACE))+((WALL_THICKNESS+EXTRA_SPACE)*(WALL_THICKNESS+EXTRA_SPACE)))]);

}
			//*end wedge 1


			//*Start wedge 2
translate ([((CARD_LONG_EDGE/2) - (TAB_THICKNESS/2)),CARD_SHORT_EDGE,HEIGHT-WALL_THICKNESS-1-EXTRA_SPACE])

 difference (){
cube ([TAB_THICKNESS,WALL_THICKNESS+EXTRA_SPACE,WALL_THICKNESS+EXTRA_SPACE]);

translate ([0 ,0 ,0]) rotate ([-45,0,0])  cube ([(TAB_THICKNESS+3),sqrt(((WALL_THICKNESS+EXTRA_SPACE)*(WALL_THICKNESS+EXTRA_SPACE))+((WALL_THICKNESS+EXTRA_SPACE)*(WALL_THICKNESS+EXTRA_SPACE))),sqrt(((WALL_THICKNESS+EXTRA_SPACE)*(WALL_THICKNESS+EXTRA_SPACE))+((WALL_THICKNESS+EXTRA_SPACE)*(WALL_THICKNESS+EXTRA_SPACE)))]);
}
			//*end wedge 2


translate ([((CARD_LONG_EDGE/2) -(TAB_THICKNESS/2)),-WALL_THICKNESS-EXTRA_SPACE,HEIGHT-1])  cube ([TAB_THICKNESS, WALL_THICKNESS+EXTRA_SPACE, 1]); 					//*Tab

translate ([((CARD_LONG_EDGE/2) -(TAB_THICKNESS/2)),CARD_SHORT_EDGE,HEIGHT-1])  cube ([TAB_THICKNESS, WALL_THICKNESS+EXTRA_SPACE, 1]);				//*Tab

difference()
{
	translate ([-WALL_THICKNESS-EXTRA_SPACE, -WALL_THICKNESS-EXTRA_SPACE, 0 ]) cube ([CARD_LONG_EDGE + (WALL_THICKNESS*2)+ALL_EXTRA_SPACE, CARD_SHORT_EDGE + (WALL_THICKNESS*2)+ALL_EXTRA_SPACE, WALL_THICKNESS]);  						//*Bottom Plate

	translate([CARD_LONG_EDGE/2,CARD_SHORT_EDGE/2,-WALL_THICKNESS]) scale([BOTTOM_CUTOUT_HEIGHT_RATIO,1,1]) cylinder(h=BOTTOM_CUTOUT_LENGTH,r=BOTTOM_CUTOUT_RADIUS);  //*Bottom cutout to cut through bottom plate
}

difference() 
{
	cube ([CARD_LONG_EDGE,CARD_SHORT_EDGE,HEIGHT]);		//*Main Body

	translate([ ((CARD_LONG_EDGE / 2) + (TAB_THICKNESS/2)), -.5, ((HEIGHT+ WALL_THICKNESS) / 4) ]) cube ([2, CARD_SHORT_EDGE + 2, HEIGHT]);	//*Tab cutout
	
	translate([ ((CARD_LONG_EDGE / 2) - ((TAB_THICKNESS/2)+2)), -.5, ((HEIGHT+ WALL_THICKNESS)/ 4) ]) cube ([2, CARD_SHORT_EDGE + 2, HEIGHT ]);  //*Tab cutout

	translate([WALL_THICKNESS,WALL_THICKNESS,WALL_THICKNESS]) cube ([CARD_LONG_EDGE - (WALL_THICKNESS*2),CARD_SHORT_EDGE - (WALL_THICKNESS*2),HEIGHT]);			//*Hole

    translate([-WALL_THICKNESS/2,CARD_SHORT_EDGE/2,HEIGHT]) scale([1,END_CUTOUT_WIDTH_RATIO,1]) rotate([0,90,0]) cylinder(h=END_CUTOUT_LENGTH,r=END_CUTOUT_RADIUS);  //*End cutout
	translate([CARD_LONG_EDGE/2,CARD_SHORT_EDGE/2,-WALL_THICKNESS]) scale([BOTTOM_CUTOUT_HEIGHT_RATIO,1,1]) cylinder(h=BOTTOM_CUTOUT_LENGTH,r=BOTTOM_CUTOUT_RADIUS);  //*Bottom cutout to cut through main box
}
			//*End Bottom of Box



			//*Start Top of Box


translate ([SPACE_BETWEEN_BOTTOM_AND_LID, 0, 0]) 


difference() 
{
	cube ([LID_OUTSIDE_LONG_THICKNESS+ALL_EXTRA_SPACE, LID_OUTSIDE_SHORT_THICKNESS+ALL_EXTRA_SPACE, HEIGHT]); 		//*Top Main Body


	translate([ ((LID_OUTSIDE_LONG_THICKNESS+ALL_EXTRA_SPACE) / 2)-((TAB_THICKNESS+1)/2), -.5, WALL_THICKNESS]) 
cube ([(TAB_THICKNESS+1), LID_OUTSIDE_SHORT_THICKNESS + 2, WALL_THICKNESS+1.15 ]); 	//*Tab Hole

	translate([WALL_THICKNESS,WALL_THICKNESS, WALL_THICKNESS]) 
cube ([LID_OUTSIDE_LONG_THICKNESS - (WALL_THICKNESS*2)+ALL_EXTRA_SPACE,LID_OUTSIDE_SHORT_THICKNESS - (WALL_THICKNESS*2)+ALL_EXTRA_SPACE,HEIGHT]);		//*Hole
translate([LID_OUTSIDE_LONG_THICKNESS/2,LID_OUTSIDE_SHORT_THICKNESS/2,-WALL_THICKNESS]) scale([BOTTOM_CUTOUT_HEIGHT_RATIO,1,1]) cylinder(h=BOTTOM_CUTOUT_LENGTH,r=BOTTOM_CUTOUT_RADIUS);  //*Bottom cutout to cut through main box
}

			//* End Top of Box