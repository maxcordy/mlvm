/* [Global] */

// Which part would you like to make?
part = "a"; // [a:Assembled,f:Front,g:Front without decoration,b:Body,c:Body without embossed QR code,p:Plate,d:Decoration only]

// How much gap (microns) should be left between fitting, unattached, parts?
Micron_Gap = 40; // [10:200]

// What diameter (mm) should the entry hole in the decoration or front have?
Entry_Diameter = 40; // [20:60]


/* [Hidden] */


// Created July 14, 2013 by H. Dietz
// http://aggregate.org/hankd
// Completely self-contained 3rd version improvements:
//	Fully customizer compatible (a HUGE pain!)
//	Ladder to aid bird egress
//	Redesigned plate for smoother operation
//	Embossed QR code for Instructable about this
//	Mount removed because it's too specific to a particular post

// Polygons for decoration...
// created from SVG file using svg2polygon.sh
module poly0() {
polygon(points = [
[107.828,732.585],
[97.9539,731.865],
[91.255,729.419],
[83.9263,724.355],
[78.5854,717.481],
[74.8642,706.936],
[74.2757,413.887],
[74.8638,120.836],
[77.0336,113.284],
[80.6888,106.993],
[89.0973,99.4837],
[100.039,95.4195],
[686.607,95.4195],
[695.346,98.3475],
[702.891,103.524],
[708.758,111.636],
[711.618,120.138],
[712.071,413.885],
[711.613,707.632],
[709.579,714.462],
[705.844,720.776],
[697.727,728.165],
[687.056,732.224],
[399.914,732.757],
[107.828,732.585],
[107.828,732.585]], paths = [[
0,
1,
2,
3,
4,
5,
6,
7,
8,
9,
10,
11,
12,
13,
14,
15,
16,
17,
18,
19,
20,
21,
22,
23,
24,
25]]);
}
poly0minx = 74.2757;
poly0maxx = 712.071;
poly0miny = 95.4195;
poly0maxy = 732.757;
module poly1() {
polygon(points = [
[686.025,715.482],
[691.798,711.914],
[695.12,705.969],
[695.594,413.862],
[695.594,123.382],
[694.969,121.357],
[691.688,115.713],
[686.025,112.288],
[684.094,111.636],
[393.255,111.636],
[102.417,111.636],
[100.565,112.26],
[95.6289,115.033],
[92.2308,119.575],
[91.2014,121.671],
[91.118,412.986],
[91.3619,705.633],
[93.5717,710.4],
[97.1722,713.965],
[100.318,715.4],
[102.286,716.089],
[393.19,716.112],
[684.094,716.134],
[686.025,715.482],
[686.025,715.482]], paths = [[
0,
1,
2,
3,
4,
5,
6,
7,
8,
9,
10,
11,
12,
13,
14,
15,
16,
17,
18,
19,
20,
21,
22,
23,
24]]);
}
poly1minx = 91.118;
poly1maxx = 695.594;
poly1miny = 111.636;
poly1maxy = 716.134;
module poly2() {
polygon(points = [
[325.496,620.602],
[244.937,540.049],
[246.558,537.738],
[250.875,532.336],
[258.021,523.618],
[264.238,516.147],
[270.572,508.244],
[274.596,503.662],
[278.047,499.574],
[284.468,491.676],
[291.074,483.531],
[295.553,478.235],
[304.433,468.02],
[312.078,458.986],
[317.222,453.039],
[319.089,450.532],
[320.871,448.333],
[324.909,443.84],
[328.999,439.173],
[330.742,437.076],
[332.05,435.274],
[335.695,430.874],
[343.005,422.236],
[346.215,418.32],
[353.929,409.234],
[361.141,400.618],
[364.874,396.061],
[367.772,392.554],
[369.657,390.2],
[371.702,387.717],
[374.471,384.529],
[376.544,381.926],
[378.943,379.048],
[382.089,375.306],
[386.491,369.796],
[391.509,363.758],
[394.222,360.502],
[395.046,359.211],
[396.918,356.655],
[400.663,352.204],
[405.149,346.648],
[409.942,340.642],
[413.82,335.684],
[416.038,332.471],
[417.25,330.844],
[416.705,328.907],
[405.833,317.472],
[393.12,304.249],
[387.22,297.746],
[382.543,292.653],
[384.186,291.56],
[403.059,289.693],
[407.703,289.292],
[415.791,288.536],
[423.58,287.95],
[427.774,287.517],
[434.065,287.039],
[439.757,286.578],
[443.951,286.285],
[452.489,285.692],
[471.662,284.291],
[476.747,283.875],
[482.139,283.554],
[486.94,283.281],
[498.474,282.686],
[509.268,282.069],
[519.744,271.764],
[524.237,266.785],
[528.731,261.424],
[534.348,255.31],
[552.056,236.419],
[554.303,234.455],
[557.191,235.609],
[565.196,240.03],
[567.911,241.726],
[570.84,243.467],
[578.46,247.875],
[580.916,249.356],
[583.027,250.591],
[586.159,252.51],
[589.115,254.263],
[591.915,255.863],
[595.536,257.949],
[598.158,259.548],
[597.259,262.265],
[589.245,271.023],
[592.151,271.861],
[599.88,271.169],
[609.616,270.246],
[615.907,269.487],
[628.939,267.734],
[638.975,266.072],
[644.217,265.132],
[649.01,264.127],
[652.905,263.22],
[656.05,262.455],
[660.844,261.231],
[665.787,259.86],
[667.734,259.306],
[672.895,257.6],
[674.498,257.538],
[674.299,261.712],
[673.881,264.108],
[673.45,266.056],
[672.677,270.698],
[671.787,277.139],
[670.737,286.725],
[669.967,294.334],
[669.395,300.804],
[668.911,306.645],
[668.513,311.288],
[667.92,317.878],
[666.529,331.957],
[665.322,344.089],
[663.99,357.569],
[662.168,376.006],
[661.425,383.944],
[660.866,388.872],
[660.389,394.114],
[659.804,400.255],
[659.379,404.149],
[658.761,411.188],
[657.847,420.025],
[657.253,425.867],
[656.826,431.004],
[656.375,434.898],
[655.757,440.395],
[655.134,447.434],
[654.551,453.425],
[653.811,460.503],
[653.183,467.386],
[652.859,470.575],
[652.461,474.027],
[651.602,482.782],
[649.933,498.957],
[648.255,514.834],
[647.8,519.477],
[645.596,537.243],
[644.847,537.899],
[636.597,529.49],
[624.322,516.46],
[622.154,514.759],
[617.555,517.502],
[613.511,520.891],
[609.928,523.948],
[608.182,525.318],
[603.199,529.76],
[597.396,535.076],
[593.763,538.049],
[589.751,541.494],
[584.51,546.137],
[574.266,555.019],
[568.981,559.821],
[564.676,563.661],
[561.614,566.225],
[557.718,569.547],
[553.274,573.349],
[549.043,577.231],
[545.058,580.787],
[541.163,584.059],
[529.779,594.097],
[523.884,599.175],
[520.888,601.631],
[518.246,603.846],
[512.671,608.926],
[505.143,615.483],
[503.85,616.564],
[501.714,618.353],
[496.275,623.188],
[484.244,633.62],
[480.2,637.22],
[476.692,640.407],
[472.749,643.791],
[467.919,647.985],
[464.074,651.3],
[461.282,653.696],
[456.872,657.57],
[452.274,661.706],
[448.635,664.851],
[445.437,667.456],
[441.053,671.268],
[429.024,682.119],
[426.503,684.081],
[418.665,691.021],
[413.796,695.357],
[410.03,698.527],
[406.585,701.155],
[325.496,620.602],
[325.496,620.602]], paths = [[
0,
1,
2,
3,
4,
5,
6,
7,
8,
9,
10,
11,
12,
13,
14,
15,
16,
17,
18,
19,
20,
21,
22,
23,
24,
25,
26,
27,
28,
29,
30,
31,
32,
33,
34,
35,
36,
37,
38,
39,
40,
41,
42,
43,
44,
45,
46,
47,
48,
49,
50,
51,
52,
53,
54,
55,
56,
57,
58,
59,
60,
61,
62,
63,
64,
65,
66,
67,
68,
69,
70,
71,
72,
73,
74,
75,
76,
77,
78,
79,
80,
81,
82,
83,
84,
85,
86,
87,
88,
89,
90,
91,
92,
93,
94,
95,
96,
97,
98,
99,
100,
101,
102,
103,
104,
105,
106,
107,
108,
109,
110,
111,
112,
113,
114,
115,
116,
117,
118,
119,
120,
121,
122,
123,
124,
125,
126,
127,
128,
129,
130,
131,
132,
133,
134,
135,
136,
137,
138,
139,
140,
141,
142,
143,
144,
145,
146,
147,
148,
149,
150,
151,
152,
153,
154,
155,
156,
157,
158,
159,
160,
161,
162,
163,
164,
165,
166,
167,
168,
169,
170,
171,
172,
173,
174,
175,
176,
177,
178,
179,
180,
181,
182,
183,
184,
185,
186,
187,
188]]);
}
poly2minx = 244.937;
poly2maxx = 674.498;
poly2miny = 234.455;
poly2maxy = 701.155;
module poly3() {
polygon(points = [
[187.689,397.241],
[185.342,396.555],
[185.168,392.501],
[184.975,388.722],
[182.541,390.85],
[179.83,392.672],
[174.034,386.4],
[175.532,384.379],
[176.865,382.324],
[172.675,381.508],
[169.361,380.899],
[168.86,376.565],
[168.515,372.321],
[166.127,374.293],
[163.694,376.441],
[158.104,370.946],
[160.276,367.863],
[162.473,365.063],
[158.123,365.123],
[153.555,365.265],
[153.064,360.28],
[153.738,355.346],
[158.756,354.882],
[171.928,353.823],
[188.629,338.032],
[204.291,321.991],
[199.939,315.482],
[187.566,295.093],
[183.469,284.778],
[182.012,280.982],
[169.391,278.19],
[134.724,270.345],
[117.002,263.116],
[111.298,258.149],
[111.008,254.273],
[114.269,251.811],
[117.938,250.929],
[119.811,250.754],
[118.77,249.31],
[116.06,243.407],
[116.785,240.973],
[122.873,238.496],
[125.049,238.301],
[124.736,237.003],
[124.555,229.273],
[127.793,227.227],
[132.243,227.563],
[133.775,227.338],
[133.297,220.939],
[134.073,218.242],
[137.484,217.174],
[141.731,217.841],
[143.369,218.119],
[143.777,216.297],
[145.805,209.879],
[149.487,209.34],
[154.063,210.617],
[162.071,219.071],
[172.893,234.603],
[181.225,248.232],
[183.771,252.576],
[188.567,260.888],
[192.584,267.099],
[197.101,264.832],
[213.672,256.726],
[228.557,252.012],
[241.483,249.856],
[254.769,249.523],
[269.83,250.9],
[284.656,254.709],
[300.399,261.326],
[315.788,270.947],
[334.113,288.372],
[343.888,302.137],
[350.931,315.755],
[354.079,324.959],
[349.755,330.902],
[347.188,334.092],
[348.366,339.79],
[353.959,364.459],
[356.121,375.921],
[356.025,376.591],
[355.426,375.862],
[348.462,368.467],
[342.091,361.557],
[327.783,347.401],
[326.277,347.481],
[307.794,353.827],
[294.944,356.596],
[283.978,357.372],
[259.903,354.548],
[236.616,346.021],
[232.069,343.91],
[229.221,344.826],
[218.01,355.991],
[209.833,364.743],
[199.473,375.609],
[196.602,378.691],
[196.397,381.685],
[194.195,396.827],
[191.607,397.681],
[187.689,397.241],
[187.689,397.241]], paths = [[
0,
1,
2,
3,
4,
5,
6,
7,
8,
9,
10,
11,
12,
13,
14,
15,
16,
17,
18,
19,
20,
21,
22,
23,
24,
25,
26,
27,
28,
29,
30,
31,
32,
33,
34,
35,
36,
37,
38,
39,
40,
41,
42,
43,
44,
45,
46,
47,
48,
49,
50,
51,
52,
53,
54,
55,
56,
57,
58,
59,
60,
61,
62,
63,
64,
65,
66,
67,
68,
69,
70,
71,
72,
73,
74,
75,
76,
77,
78,
79,
80,
81,
82,
83,
84,
85,
86,
87,
88,
89,
90,
91,
92,
93,
94,
95,
96,
97,
98,
99,
100,
101,
102]]);
}
poly3minx = 111.008;
poly3maxx = 356.121;
poly3miny = 209.34;
poly3maxy = 397.681;
module poly4() {
polygon(points = [
[204.516,353.585],
[221.067,336.591],
[220.094,335.566],
[214.435,331.268],
[212.787,330.56],
[196.469,346.69],
[180.709,362.512],
[180.367,365.415],
[180.025,369.426],
[180.025,370.534],
[183.995,370.326],
[187.964,370.118],
[204.516,353.585],
[204.516,353.585]], paths = [[
0,
1,
2,
3,
4,
5,
6,
7,
8,
9,
10,
11,
12,
13]]);
}
poly4minx = 180.025;
poly4maxx = 221.067;
poly4miny = 330.56;
poly4maxy = 370.534;


decorpolyx = poly0maxx - poly0minx;
decorpolyy = poly0maxy - poly0miny;

module decor() {
	color("black")
	difference() {
		union () {
			scale([sqrt(2)*127/decorpolyx, sqrt(2)*127/decorpolyy, 1])
			linear_extrude(height = 2.5)
			translate([-poly0minx, poly0maxy, 0])
			rotate([0, 0, 90])
			mirror([1, 1, 0])
			union() {
				difference() {
					poly0();
					poly1();
				}
				poly2();
				poly3();
			}
			translate([90,50,0.5]) cylinder(h=26, r=3);
		}
		translate([120,80,-23]) cylinder(h=100, r=Entry_Diameter/2);
	}
}

module ladder(lstep = 0.6) {
	rotate([0, 0, -45])
 	for (i = [0 : 39]) {
		translate([0, -30-i*2*lstep, 0])
                cube([40, lstep, lstep], center=true);
        }
}

module front(tol=0.4, decorate="y") {
	difference() {
		union () {
			color("yellow")
			minkowski() {
				cube(size=[180,180,4]);
				cylinder(h=2, r=5);
			}
			if (decorate == "y") {
				translate([0,0,5]) decor();
			}
		}
		translate([120,80,-23]) cylinder(h=100, r=Entry_Diameter/2);
		translate([120, 80, 0]) ladder();
	}
}

module plainback() {
	color("yellow")
	difference() {
		minkowski() {
			cube(size=[180,180,125-2]);
			cylinder(h=2, r=5);
		}
		difference() {
			translate([10,10,6]) minkowski() {
				cube(size=[160,160,390]);
				cylinder(h=2, r=10);
			}
			translate([-10,-10,-20]) rotate([0,0,45])
				cube(size=[160,160,350], center=true);

		}
		translate([-17,-17,-70]) rotate([0,0,45])
			cube(size=[160,160,500], center=true);

		// air vents
		translate([140,140,0]) rotate([0,-60,45]) cube(size=[25,75,3], center=true);
		translate([150,150,0]) rotate([0,-60,45]) cube(size=[25,50,3], center=true);
		translate([160,160,0]) rotate([0,-60,45]) cube(size=[25,25,3], center=true);

		// base drain
		translate([-10,95,95]) rotate([-30,90,45]) cube(size=[40,50,3], center=true);
		translate([95,-10,35]) rotate([30,90,45]) cube(size=[40,50,3], center=true);
		translate([-10,95,35]) rotate([-30,90,45]) cube(size=[40,50,3], center=true);
		translate([95,-10,95]) rotate([30,90,45]) cube(size=[40,50,3], center=true);
	}
}

module plate(tol=0.4) {
	// mounting/clean-out plate
	// could difference cylinders for mounting holes from this,
	// but it isn't clear what the mounting holes should be
	color("yellow")
	union() {
		// the plate itself...
		translate([43,43,125/2]) rotate([270,180,-45]) union() {
			cube(size=[100,125,10], center=true);
			// 45-degree edges
			for (i = [0, 1]) {
				mirror([i, 0, 0])
				translate([100/2, 0, 0])
				rotate([0, 45, 0])
				cube(size=[sqrt(2)*5, 125, sqrt(2)*5], center=true);
			}
		}

		// with 2x2mm tab for easier removal
		translate([43,43,1]) rotate([270,180,-45])
			translate([0,0,-4]) cube(size=[100,2,8], center=true);
	}
}

// QR code for back of birdhouse
module qrcode() {
	translate([0,0,0]) cube([1.001,1.001,1]);
	translate([1,0,0]) cube([1.001,1.001,1]);
	translate([2,0,0]) cube([1.001,1.001,1]);
	translate([3,0,0]) cube([1.001,1.001,1]);
	translate([4,0,0]) cube([1.001,1.001,1]);
	translate([5,0,0]) cube([1.001,1.001,1]);
	translate([6,0,0]) cube([1.001,1.001,1]);
	translate([12,0,0]) cube([1.001,1.001,1]);
	translate([13,0,0]) cube([1.001,1.001,1]);
	translate([16,0,0]) cube([1.001,1.001,1]);
	translate([17,0,0]) cube([1.001,1.001,1]);
	translate([18,0,0]) cube([1.001,1.001,1]);
	translate([19,0,0]) cube([1.001,1.001,1]);
	translate([20,0,0]) cube([1.001,1.001,1]);
	translate([22,0,0]) cube([1.001,1.001,1]);
	translate([23,0,0]) cube([1.001,1.001,1]);
	translate([26,0,0]) cube([1.001,1.001,1]);
	translate([27,0,0]) cube([1.001,1.001,1]);
	translate([28,0,0]) cube([1.001,1.001,1]);
	translate([29,0,0]) cube([1.001,1.001,1]);
	translate([30,0,0]) cube([1.001,1.001,1]);
	translate([31,0,0]) cube([1.001,1.001,1]);
	translate([32,0,0]) cube([1.001,1.001,1]);
	translate([0,1,0]) cube([1.001,1.001,1]);
	translate([6,1,0]) cube([1.001,1.001,1]);
	translate([13,1,0]) cube([1.001,1.001,1]);
	translate([14,1,0]) cube([1.001,1.001,1]);
	translate([15,1,0]) cube([1.001,1.001,1]);
	translate([16,1,0]) cube([1.001,1.001,1]);
	translate([21,1,0]) cube([1.001,1.001,1]);
	translate([24,1,0]) cube([1.001,1.001,1]);
	translate([26,1,0]) cube([1.001,1.001,1]);
	translate([32,1,0]) cube([1.001,1.001,1]);
	translate([0,2,0]) cube([1.001,1.001,1]);
	translate([2,2,0]) cube([1.001,1.001,1]);
	translate([3,2,0]) cube([1.001,1.001,1]);
	translate([4,2,0]) cube([1.001,1.001,1]);
	translate([6,2,0]) cube([1.001,1.001,1]);
	translate([8,2,0]) cube([1.001,1.001,1]);
	translate([9,2,0]) cube([1.001,1.001,1]);
	translate([12,2,0]) cube([1.001,1.001,1]);
	translate([13,2,0]) cube([1.001,1.001,1]);
	translate([16,2,0]) cube([1.001,1.001,1]);
	translate([19,2,0]) cube([1.001,1.001,1]);
	translate([21,2,0]) cube([1.001,1.001,1]);
	translate([22,2,0]) cube([1.001,1.001,1]);
	translate([23,2,0]) cube([1.001,1.001,1]);
	translate([26,2,0]) cube([1.001,1.001,1]);
	translate([28,2,0]) cube([1.001,1.001,1]);
	translate([29,2,0]) cube([1.001,1.001,1]);
	translate([30,2,0]) cube([1.001,1.001,1]);
	translate([32,2,0]) cube([1.001,1.001,1]);
	translate([0,3,0]) cube([1.001,1.001,1]);
	translate([2,3,0]) cube([1.001,1.001,1]);
	translate([3,3,0]) cube([1.001,1.001,1]);
	translate([4,3,0]) cube([1.001,1.001,1]);
	translate([6,3,0]) cube([1.001,1.001,1]);
	translate([8,3,0]) cube([1.001,1.001,1]);
	translate([10,3,0]) cube([1.001,1.001,1]);
	translate([11,3,0]) cube([1.001,1.001,1]);
	translate([12,3,0]) cube([1.001,1.001,1]);
	translate([14,3,0]) cube([1.001,1.001,1]);
	translate([22,3,0]) cube([1.001,1.001,1]);
	translate([23,3,0]) cube([1.001,1.001,1]);
	translate([24,3,0]) cube([1.001,1.001,1]);
	translate([26,3,0]) cube([1.001,1.001,1]);
	translate([28,3,0]) cube([1.001,1.001,1]);
	translate([29,3,0]) cube([1.001,1.001,1]);
	translate([30,3,0]) cube([1.001,1.001,1]);
	translate([32,3,0]) cube([1.001,1.001,1]);
	translate([0,4,0]) cube([1.001,1.001,1]);
	translate([2,4,0]) cube([1.001,1.001,1]);
	translate([3,4,0]) cube([1.001,1.001,1]);
	translate([4,4,0]) cube([1.001,1.001,1]);
	translate([6,4,0]) cube([1.001,1.001,1]);
	translate([8,4,0]) cube([1.001,1.001,1]);
	translate([12,4,0]) cube([1.001,1.001,1]);
	translate([13,4,0]) cube([1.001,1.001,1]);
	translate([15,4,0]) cube([1.001,1.001,1]);
	translate([17,4,0]) cube([1.001,1.001,1]);
	translate([18,4,0]) cube([1.001,1.001,1]);
	translate([19,4,0]) cube([1.001,1.001,1]);
	translate([21,4,0]) cube([1.001,1.001,1]);
	translate([22,4,0]) cube([1.001,1.001,1]);
	translate([23,4,0]) cube([1.001,1.001,1]);
	translate([26,4,0]) cube([1.001,1.001,1]);
	translate([28,4,0]) cube([1.001,1.001,1]);
	translate([29,4,0]) cube([1.001,1.001,1]);
	translate([30,4,0]) cube([1.001,1.001,1]);
	translate([32,4,0]) cube([1.001,1.001,1]);
	translate([0,5,0]) cube([1.001,1.001,1]);
	translate([6,5,0]) cube([1.001,1.001,1]);
	translate([8,5,0]) cube([1.001,1.001,1]);
	translate([9,5,0]) cube([1.001,1.001,1]);
	translate([11,5,0]) cube([1.001,1.001,1]);
	translate([12,5,0]) cube([1.001,1.001,1]);
	translate([15,5,0]) cube([1.001,1.001,1]);
	translate([16,5,0]) cube([1.001,1.001,1]);
	translate([20,5,0]) cube([1.001,1.001,1]);
	translate([24,5,0]) cube([1.001,1.001,1]);
	translate([26,5,0]) cube([1.001,1.001,1]);
	translate([32,5,0]) cube([1.001,1.001,1]);
	translate([0,6,0]) cube([1.001,1.001,1]);
	translate([1,6,0]) cube([1.001,1.001,1]);
	translate([2,6,0]) cube([1.001,1.001,1]);
	translate([3,6,0]) cube([1.001,1.001,1]);
	translate([4,6,0]) cube([1.001,1.001,1]);
	translate([5,6,0]) cube([1.001,1.001,1]);
	translate([6,6,0]) cube([1.001,1.001,1]);
	translate([8,6,0]) cube([1.001,1.001,1]);
	translate([10,6,0]) cube([1.001,1.001,1]);
	translate([12,6,0]) cube([1.001,1.001,1]);
	translate([14,6,0]) cube([1.001,1.001,1]);
	translate([16,6,0]) cube([1.001,1.001,1]);
	translate([18,6,0]) cube([1.001,1.001,1]);
	translate([20,6,0]) cube([1.001,1.001,1]);
	translate([22,6,0]) cube([1.001,1.001,1]);
	translate([24,6,0]) cube([1.001,1.001,1]);
	translate([26,6,0]) cube([1.001,1.001,1]);
	translate([27,6,0]) cube([1.001,1.001,1]);
	translate([28,6,0]) cube([1.001,1.001,1]);
	translate([29,6,0]) cube([1.001,1.001,1]);
	translate([30,6,0]) cube([1.001,1.001,1]);
	translate([31,6,0]) cube([1.001,1.001,1]);
	translate([32,6,0]) cube([1.001,1.001,1]);
	translate([8,7,0]) cube([1.001,1.001,1]);
	translate([9,7,0]) cube([1.001,1.001,1]);
	translate([10,7,0]) cube([1.001,1.001,1]);
	translate([11,7,0]) cube([1.001,1.001,1]);
	translate([12,7,0]) cube([1.001,1.001,1]);
	translate([14,7,0]) cube([1.001,1.001,1]);
	translate([16,7,0]) cube([1.001,1.001,1]);
	translate([18,7,0]) cube([1.001,1.001,1]);
	translate([20,7,0]) cube([1.001,1.001,1]);
	translate([21,7,0]) cube([1.001,1.001,1]);
	translate([22,7,0]) cube([1.001,1.001,1]);
	translate([23,7,0]) cube([1.001,1.001,1]);
	translate([24,7,0]) cube([1.001,1.001,1]);
	translate([0,8,0]) cube([1.001,1.001,1]);
	translate([2,8,0]) cube([1.001,1.001,1]);
	translate([3,8,0]) cube([1.001,1.001,1]);
	translate([4,8,0]) cube([1.001,1.001,1]);
	translate([5,8,0]) cube([1.001,1.001,1]);
	translate([6,8,0]) cube([1.001,1.001,1]);
	translate([10,8,0]) cube([1.001,1.001,1]);
	translate([11,8,0]) cube([1.001,1.001,1]);
	translate([13,8,0]) cube([1.001,1.001,1]);
	translate([14,8,0]) cube([1.001,1.001,1]);
	translate([17,8,0]) cube([1.001,1.001,1]);
	translate([22,8,0]) cube([1.001,1.001,1]);
	translate([24,8,0]) cube([1.001,1.001,1]);
	translate([26,8,0]) cube([1.001,1.001,1]);
	translate([27,8,0]) cube([1.001,1.001,1]);
	translate([28,8,0]) cube([1.001,1.001,1]);
	translate([29,8,0]) cube([1.001,1.001,1]);
	translate([30,8,0]) cube([1.001,1.001,1]);
	translate([0,9,0]) cube([1.001,1.001,1]);
	translate([1,9,0]) cube([1.001,1.001,1]);
	translate([3,9,0]) cube([1.001,1.001,1]);
	translate([5,9,0]) cube([1.001,1.001,1]);
	translate([9,9,0]) cube([1.001,1.001,1]);
	translate([18,9,0]) cube([1.001,1.001,1]);
	translate([19,9,0]) cube([1.001,1.001,1]);
	translate([20,9,0]) cube([1.001,1.001,1]);
	translate([21,9,0]) cube([1.001,1.001,1]);
	translate([22,9,0]) cube([1.001,1.001,1]);
	translate([23,9,0]) cube([1.001,1.001,1]);
	translate([25,9,0]) cube([1.001,1.001,1]);
	translate([26,9,0]) cube([1.001,1.001,1]);
	translate([29,9,0]) cube([1.001,1.001,1]);
	translate([30,9,0]) cube([1.001,1.001,1]);
	translate([2,10,0]) cube([1.001,1.001,1]);
	translate([4,10,0]) cube([1.001,1.001,1]);
	translate([6,10,0]) cube([1.001,1.001,1]);
	translate([7,10,0]) cube([1.001,1.001,1]);
	translate([9,10,0]) cube([1.001,1.001,1]);
	translate([10,10,0]) cube([1.001,1.001,1]);
	translate([12,10,0]) cube([1.001,1.001,1]);
	translate([15,10,0]) cube([1.001,1.001,1]);
	translate([16,10,0]) cube([1.001,1.001,1]);
	translate([18,10,0]) cube([1.001,1.001,1]);
	translate([20,10,0]) cube([1.001,1.001,1]);
	translate([25,10,0]) cube([1.001,1.001,1]);
	translate([26,10,0]) cube([1.001,1.001,1]);
	translate([28,10,0]) cube([1.001,1.001,1]);
	translate([30,10,0]) cube([1.001,1.001,1]);
	translate([31,10,0]) cube([1.001,1.001,1]);
	translate([2,11,0]) cube([1.001,1.001,1]);
	translate([5,11,0]) cube([1.001,1.001,1]);
	translate([8,11,0]) cube([1.001,1.001,1]);
	translate([9,11,0]) cube([1.001,1.001,1]);
	translate([10,11,0]) cube([1.001,1.001,1]);
	translate([12,11,0]) cube([1.001,1.001,1]);
	translate([14,11,0]) cube([1.001,1.001,1]);
	translate([15,11,0]) cube([1.001,1.001,1]);
	translate([16,11,0]) cube([1.001,1.001,1]);
	translate([21,11,0]) cube([1.001,1.001,1]);
	translate([24,11,0]) cube([1.001,1.001,1]);
	translate([26,11,0]) cube([1.001,1.001,1]);
	translate([28,11,0]) cube([1.001,1.001,1]);
	translate([29,11,0]) cube([1.001,1.001,1]);
	translate([30,11,0]) cube([1.001,1.001,1]);
	translate([31,11,0]) cube([1.001,1.001,1]);
	translate([32,11,0]) cube([1.001,1.001,1]);
	translate([6,12,0]) cube([1.001,1.001,1]);
	translate([10,12,0]) cube([1.001,1.001,1]);
	translate([11,12,0]) cube([1.001,1.001,1]);
	translate([12,12,0]) cube([1.001,1.001,1]);
	translate([17,12,0]) cube([1.001,1.001,1]);
	translate([18,12,0]) cube([1.001,1.001,1]);
	translate([22,12,0]) cube([1.001,1.001,1]);
	translate([23,12,0]) cube([1.001,1.001,1]);
	translate([24,12,0]) cube([1.001,1.001,1]);
	translate([25,12,0]) cube([1.001,1.001,1]);
	translate([27,12,0]) cube([1.001,1.001,1]);
	translate([28,12,0]) cube([1.001,1.001,1]);
	translate([29,12,0]) cube([1.001,1.001,1]);
	translate([0,13,0]) cube([1.001,1.001,1]);
	translate([1,13,0]) cube([1.001,1.001,1]);
	translate([3,13,0]) cube([1.001,1.001,1]);
	translate([4,13,0]) cube([1.001,1.001,1]);
	translate([8,13,0]) cube([1.001,1.001,1]);
	translate([9,13,0]) cube([1.001,1.001,1]);
	translate([14,13,0]) cube([1.001,1.001,1]);
	translate([18,13,0]) cube([1.001,1.001,1]);
	translate([19,13,0]) cube([1.001,1.001,1]);
	translate([20,13,0]) cube([1.001,1.001,1]);
	translate([21,13,0]) cube([1.001,1.001,1]);
	translate([25,13,0]) cube([1.001,1.001,1]);
	translate([26,13,0]) cube([1.001,1.001,1]);
	translate([29,13,0]) cube([1.001,1.001,1]);
	translate([30,13,0]) cube([1.001,1.001,1]);
	translate([31,13,0]) cube([1.001,1.001,1]);
	translate([32,13,0]) cube([1.001,1.001,1]);
	translate([0,14,0]) cube([1.001,1.001,1]);
	translate([2,14,0]) cube([1.001,1.001,1]);
	translate([3,14,0]) cube([1.001,1.001,1]);
	translate([5,14,0]) cube([1.001,1.001,1]);
	translate([6,14,0]) cube([1.001,1.001,1]);
	translate([8,14,0]) cube([1.001,1.001,1]);
	translate([9,14,0]) cube([1.001,1.001,1]);
	translate([11,14,0]) cube([1.001,1.001,1]);
	translate([12,14,0]) cube([1.001,1.001,1]);
	translate([13,14,0]) cube([1.001,1.001,1]);
	translate([15,14,0]) cube([1.001,1.001,1]);
	translate([20,14,0]) cube([1.001,1.001,1]);
	translate([21,14,0]) cube([1.001,1.001,1]);
	translate([22,14,0]) cube([1.001,1.001,1]);
	translate([25,14,0]) cube([1.001,1.001,1]);
	translate([30,14,0]) cube([1.001,1.001,1]);
	translate([31,14,0]) cube([1.001,1.001,1]);
	translate([0,15,0]) cube([1.001,1.001,1]);
	translate([2,15,0]) cube([1.001,1.001,1]);
	translate([4,15,0]) cube([1.001,1.001,1]);
	translate([7,15,0]) cube([1.001,1.001,1]);
	translate([9,15,0]) cube([1.001,1.001,1]);
	translate([10,15,0]) cube([1.001,1.001,1]);
	translate([12,15,0]) cube([1.001,1.001,1]);
	translate([13,15,0]) cube([1.001,1.001,1]);
	translate([16,15,0]) cube([1.001,1.001,1]);
	translate([19,15,0]) cube([1.001,1.001,1]);
	translate([21,15,0]) cube([1.001,1.001,1]);
	translate([25,15,0]) cube([1.001,1.001,1]);
	translate([26,15,0]) cube([1.001,1.001,1]);
	translate([27,15,0]) cube([1.001,1.001,1]);
	translate([28,15,0]) cube([1.001,1.001,1]);
	translate([30,15,0]) cube([1.001,1.001,1]);
	translate([1,16,0]) cube([1.001,1.001,1]);
	translate([4,16,0]) cube([1.001,1.001,1]);
	translate([6,16,0]) cube([1.001,1.001,1]);
	translate([10,16,0]) cube([1.001,1.001,1]);
	translate([12,16,0]) cube([1.001,1.001,1]);
	translate([13,16,0]) cube([1.001,1.001,1]);
	translate([17,16,0]) cube([1.001,1.001,1]);
	translate([22,16,0]) cube([1.001,1.001,1]);
	translate([23,16,0]) cube([1.001,1.001,1]);
	translate([24,16,0]) cube([1.001,1.001,1]);
	translate([25,16,0]) cube([1.001,1.001,1]);
	translate([27,16,0]) cube([1.001,1.001,1]);
	translate([28,16,0]) cube([1.001,1.001,1]);
	translate([32,16,0]) cube([1.001,1.001,1]);
	translate([1,17,0]) cube([1.001,1.001,1]);
	translate([4,17,0]) cube([1.001,1.001,1]);
	translate([11,17,0]) cube([1.001,1.001,1]);
	translate([13,17,0]) cube([1.001,1.001,1]);
	translate([14,17,0]) cube([1.001,1.001,1]);
	translate([16,17,0]) cube([1.001,1.001,1]);
	translate([17,17,0]) cube([1.001,1.001,1]);
	translate([19,17,0]) cube([1.001,1.001,1]);
	translate([20,17,0]) cube([1.001,1.001,1]);
	translate([21,17,0]) cube([1.001,1.001,1]);
	translate([22,17,0]) cube([1.001,1.001,1]);
	translate([23,17,0]) cube([1.001,1.001,1]);
	translate([25,17,0]) cube([1.001,1.001,1]);
	translate([26,17,0]) cube([1.001,1.001,1]);
	translate([27,17,0]) cube([1.001,1.001,1]);
	translate([29,17,0]) cube([1.001,1.001,1]);
	translate([30,17,0]) cube([1.001,1.001,1]);
	translate([31,17,0]) cube([1.001,1.001,1]);
	translate([32,17,0]) cube([1.001,1.001,1]);
	translate([1,18,0]) cube([1.001,1.001,1]);
	translate([2,18,0]) cube([1.001,1.001,1]);
	translate([3,18,0]) cube([1.001,1.001,1]);
	translate([4,18,0]) cube([1.001,1.001,1]);
	translate([5,18,0]) cube([1.001,1.001,1]);
	translate([6,18,0]) cube([1.001,1.001,1]);
	translate([7,18,0]) cube([1.001,1.001,1]);
	translate([9,18,0]) cube([1.001,1.001,1]);
	translate([10,18,0]) cube([1.001,1.001,1]);
	translate([11,18,0]) cube([1.001,1.001,1]);
	translate([12,18,0]) cube([1.001,1.001,1]);
	translate([15,18,0]) cube([1.001,1.001,1]);
	translate([16,18,0]) cube([1.001,1.001,1]);
	translate([21,18,0]) cube([1.001,1.001,1]);
	translate([22,18,0]) cube([1.001,1.001,1]);
	translate([24,18,0]) cube([1.001,1.001,1]);
	translate([25,18,0]) cube([1.001,1.001,1]);
	translate([28,18,0]) cube([1.001,1.001,1]);
	translate([30,18,0]) cube([1.001,1.001,1]);
	translate([0,19,0]) cube([1.001,1.001,1]);
	translate([7,19,0]) cube([1.001,1.001,1]);
	translate([9,19,0]) cube([1.001,1.001,1]);
	translate([10,19,0]) cube([1.001,1.001,1]);
	translate([12,19,0]) cube([1.001,1.001,1]);
	translate([16,19,0]) cube([1.001,1.001,1]);
	translate([20,19,0]) cube([1.001,1.001,1]);
	translate([21,19,0]) cube([1.001,1.001,1]);
	translate([23,19,0]) cube([1.001,1.001,1]);
	translate([28,19,0]) cube([1.001,1.001,1]);
	translate([29,19,0]) cube([1.001,1.001,1]);
	translate([30,19,0]) cube([1.001,1.001,1]);
	translate([31,19,0]) cube([1.001,1.001,1]);
	translate([32,19,0]) cube([1.001,1.001,1]);
	translate([0,20,0]) cube([1.001,1.001,1]);
	translate([5,20,0]) cube([1.001,1.001,1]);
	translate([6,20,0]) cube([1.001,1.001,1]);
	translate([8,20,0]) cube([1.001,1.001,1]);
	translate([11,20,0]) cube([1.001,1.001,1]);
	translate([20,20,0]) cube([1.001,1.001,1]);
	translate([22,20,0]) cube([1.001,1.001,1]);
	translate([23,20,0]) cube([1.001,1.001,1]);
	translate([24,20,0]) cube([1.001,1.001,1]);
	translate([25,20,0]) cube([1.001,1.001,1]);
	translate([27,20,0]) cube([1.001,1.001,1]);
	translate([28,20,0]) cube([1.001,1.001,1]);
	translate([29,20,0]) cube([1.001,1.001,1]);
	translate([31,20,0]) cube([1.001,1.001,1]);
	translate([32,20,0]) cube([1.001,1.001,1]);
	translate([0,21,0]) cube([1.001,1.001,1]);
	translate([3,21,0]) cube([1.001,1.001,1]);
	translate([4,21,0]) cube([1.001,1.001,1]);
	translate([5,21,0]) cube([1.001,1.001,1]);
	translate([7,21,0]) cube([1.001,1.001,1]);
	translate([8,21,0]) cube([1.001,1.001,1]);
	translate([9,21,0]) cube([1.001,1.001,1]);
	translate([10,21,0]) cube([1.001,1.001,1]);
	translate([11,21,0]) cube([1.001,1.001,1]);
	translate([16,21,0]) cube([1.001,1.001,1]);
	translate([19,21,0]) cube([1.001,1.001,1]);
	translate([20,21,0]) cube([1.001,1.001,1]);
	translate([21,21,0]) cube([1.001,1.001,1]);
	translate([23,21,0]) cube([1.001,1.001,1]);
	translate([24,21,0]) cube([1.001,1.001,1]);
	translate([26,21,0]) cube([1.001,1.001,1]);
	translate([29,21,0]) cube([1.001,1.001,1]);
	translate([32,21,0]) cube([1.001,1.001,1]);
	translate([0,22,0]) cube([1.001,1.001,1]);
	translate([2,22,0]) cube([1.001,1.001,1]);
	translate([4,22,0]) cube([1.001,1.001,1]);
	translate([5,22,0]) cube([1.001,1.001,1]);
	translate([6,22,0]) cube([1.001,1.001,1]);
	translate([7,22,0]) cube([1.001,1.001,1]);
	translate([9,22,0]) cube([1.001,1.001,1]);
	translate([13,22,0]) cube([1.001,1.001,1]);
	translate([14,22,0]) cube([1.001,1.001,1]);
	translate([15,22,0]) cube([1.001,1.001,1]);
	translate([16,22,0]) cube([1.001,1.001,1]);
	translate([17,22,0]) cube([1.001,1.001,1]);
	translate([18,22,0]) cube([1.001,1.001,1]);
	translate([20,22,0]) cube([1.001,1.001,1]);
	translate([24,22,0]) cube([1.001,1.001,1]);
	translate([25,22,0]) cube([1.001,1.001,1]);
	translate([27,22,0]) cube([1.001,1.001,1]);
	translate([28,22,0]) cube([1.001,1.001,1]);
	translate([29,22,0]) cube([1.001,1.001,1]);
	translate([30,22,0]) cube([1.001,1.001,1]);
	translate([31,22,0]) cube([1.001,1.001,1]);
	translate([0,23,0]) cube([1.001,1.001,1]);
	translate([3,23,0]) cube([1.001,1.001,1]);
	translate([4,23,0]) cube([1.001,1.001,1]);
	translate([9,23,0]) cube([1.001,1.001,1]);
	translate([11,23,0]) cube([1.001,1.001,1]);
	translate([12,23,0]) cube([1.001,1.001,1]);
	translate([16,23,0]) cube([1.001,1.001,1]);
	translate([20,23,0]) cube([1.001,1.001,1]);
	translate([21,23,0]) cube([1.001,1.001,1]);
	translate([25,23,0]) cube([1.001,1.001,1]);
	translate([26,23,0]) cube([1.001,1.001,1]);
	translate([27,23,0]) cube([1.001,1.001,1]);
	translate([29,23,0]) cube([1.001,1.001,1]);
	translate([30,23,0]) cube([1.001,1.001,1]);
	translate([0,24,0]) cube([1.001,1.001,1]);
	translate([2,24,0]) cube([1.001,1.001,1]);
	translate([6,24,0]) cube([1.001,1.001,1]);
	translate([7,24,0]) cube([1.001,1.001,1]);
	translate([9,24,0]) cube([1.001,1.001,1]);
	translate([10,24,0]) cube([1.001,1.001,1]);
	translate([11,24,0]) cube([1.001,1.001,1]);
	translate([12,24,0]) cube([1.001,1.001,1]);
	translate([13,24,0]) cube([1.001,1.001,1]);
	translate([14,24,0]) cube([1.001,1.001,1]);
	translate([15,24,0]) cube([1.001,1.001,1]);
	translate([17,24,0]) cube([1.001,1.001,1]);
	translate([18,24,0]) cube([1.001,1.001,1]);
	translate([20,24,0]) cube([1.001,1.001,1]);
	translate([22,24,0]) cube([1.001,1.001,1]);
	translate([24,24,0]) cube([1.001,1.001,1]);
	translate([25,24,0]) cube([1.001,1.001,1]);
	translate([26,24,0]) cube([1.001,1.001,1]);
	translate([27,24,0]) cube([1.001,1.001,1]);
	translate([28,24,0]) cube([1.001,1.001,1]);
	translate([29,24,0]) cube([1.001,1.001,1]);
	translate([30,24,0]) cube([1.001,1.001,1]);
	translate([31,24,0]) cube([1.001,1.001,1]);
	translate([32,24,0]) cube([1.001,1.001,1]);
	translate([8,25,0]) cube([1.001,1.001,1]);
	translate([9,25,0]) cube([1.001,1.001,1]);
	translate([10,25,0]) cube([1.001,1.001,1]);
	translate([11,25,0]) cube([1.001,1.001,1]);
	translate([14,25,0]) cube([1.001,1.001,1]);
	translate([16,25,0]) cube([1.001,1.001,1]);
	translate([18,25,0]) cube([1.001,1.001,1]);
	translate([19,25,0]) cube([1.001,1.001,1]);
	translate([20,25,0]) cube([1.001,1.001,1]);
	translate([22,25,0]) cube([1.001,1.001,1]);
	translate([24,25,0]) cube([1.001,1.001,1]);
	translate([28,25,0]) cube([1.001,1.001,1]);
	translate([30,25,0]) cube([1.001,1.001,1]);
	translate([32,25,0]) cube([1.001,1.001,1]);
	translate([0,26,0]) cube([1.001,1.001,1]);
	translate([1,26,0]) cube([1.001,1.001,1]);
	translate([2,26,0]) cube([1.001,1.001,1]);
	translate([3,26,0]) cube([1.001,1.001,1]);
	translate([4,26,0]) cube([1.001,1.001,1]);
	translate([5,26,0]) cube([1.001,1.001,1]);
	translate([6,26,0]) cube([1.001,1.001,1]);
	translate([10,26,0]) cube([1.001,1.001,1]);
	translate([11,26,0]) cube([1.001,1.001,1]);
	translate([13,26,0]) cube([1.001,1.001,1]);
	translate([15,26,0]) cube([1.001,1.001,1]);
	translate([16,26,0]) cube([1.001,1.001,1]);
	translate([17,26,0]) cube([1.001,1.001,1]);
	translate([18,26,0]) cube([1.001,1.001,1]);
	translate([20,26,0]) cube([1.001,1.001,1]);
	translate([21,26,0]) cube([1.001,1.001,1]);
	translate([23,26,0]) cube([1.001,1.001,1]);
	translate([24,26,0]) cube([1.001,1.001,1]);
	translate([26,26,0]) cube([1.001,1.001,1]);
	translate([28,26,0]) cube([1.001,1.001,1]);
	translate([30,26,0]) cube([1.001,1.001,1]);
	translate([0,27,0]) cube([1.001,1.001,1]);
	translate([6,27,0]) cube([1.001,1.001,1]);
	translate([8,27,0]) cube([1.001,1.001,1]);
	translate([9,27,0]) cube([1.001,1.001,1]);
	translate([10,27,0]) cube([1.001,1.001,1]);
	translate([11,27,0]) cube([1.001,1.001,1]);
	translate([19,27,0]) cube([1.001,1.001,1]);
	translate([21,27,0]) cube([1.001,1.001,1]);
	translate([24,27,0]) cube([1.001,1.001,1]);
	translate([28,27,0]) cube([1.001,1.001,1]);
	translate([30,27,0]) cube([1.001,1.001,1]);
	translate([0,28,0]) cube([1.001,1.001,1]);
	translate([2,28,0]) cube([1.001,1.001,1]);
	translate([3,28,0]) cube([1.001,1.001,1]);
	translate([4,28,0]) cube([1.001,1.001,1]);
	translate([6,28,0]) cube([1.001,1.001,1]);
	translate([8,28,0]) cube([1.001,1.001,1]);
	translate([15,28,0]) cube([1.001,1.001,1]);
	translate([17,28,0]) cube([1.001,1.001,1]);
	translate([20,28,0]) cube([1.001,1.001,1]);
	translate([22,28,0]) cube([1.001,1.001,1]);
	translate([24,28,0]) cube([1.001,1.001,1]);
	translate([25,28,0]) cube([1.001,1.001,1]);
	translate([26,28,0]) cube([1.001,1.001,1]);
	translate([27,28,0]) cube([1.001,1.001,1]);
	translate([28,28,0]) cube([1.001,1.001,1]);
	translate([29,28,0]) cube([1.001,1.001,1]);
	translate([31,28,0]) cube([1.001,1.001,1]);
	translate([0,29,0]) cube([1.001,1.001,1]);
	translate([2,29,0]) cube([1.001,1.001,1]);
	translate([3,29,0]) cube([1.001,1.001,1]);
	translate([4,29,0]) cube([1.001,1.001,1]);
	translate([6,29,0]) cube([1.001,1.001,1]);
	translate([8,29,0]) cube([1.001,1.001,1]);
	translate([9,29,0]) cube([1.001,1.001,1]);
	translate([10,29,0]) cube([1.001,1.001,1]);
	translate([11,29,0]) cube([1.001,1.001,1]);
	translate([12,29,0]) cube([1.001,1.001,1]);
	translate([16,29,0]) cube([1.001,1.001,1]);
	translate([17,29,0]) cube([1.001,1.001,1]);
	translate([18,29,0]) cube([1.001,1.001,1]);
	translate([19,29,0]) cube([1.001,1.001,1]);
	translate([20,29,0]) cube([1.001,1.001,1]);
	translate([21,29,0]) cube([1.001,1.001,1]);
	translate([23,29,0]) cube([1.001,1.001,1]);
	translate([25,29,0]) cube([1.001,1.001,1]);
	translate([27,29,0]) cube([1.001,1.001,1]);
	translate([28,29,0]) cube([1.001,1.001,1]);
	translate([30,29,0]) cube([1.001,1.001,1]);
	translate([31,29,0]) cube([1.001,1.001,1]);
	translate([32,29,0]) cube([1.001,1.001,1]);
	translate([0,30,0]) cube([1.001,1.001,1]);
	translate([2,30,0]) cube([1.001,1.001,1]);
	translate([3,30,0]) cube([1.001,1.001,1]);
	translate([4,30,0]) cube([1.001,1.001,1]);
	translate([6,30,0]) cube([1.001,1.001,1]);
	translate([8,30,0]) cube([1.001,1.001,1]);
	translate([9,30,0]) cube([1.001,1.001,1]);
	translate([11,30,0]) cube([1.001,1.001,1]);
	translate([12,30,0]) cube([1.001,1.001,1]);
	translate([13,30,0]) cube([1.001,1.001,1]);
	translate([14,30,0]) cube([1.001,1.001,1]);
	translate([15,30,0]) cube([1.001,1.001,1]);
	translate([16,30,0]) cube([1.001,1.001,1]);
	translate([17,30,0]) cube([1.001,1.001,1]);
	translate([20,30,0]) cube([1.001,1.001,1]);
	translate([21,30,0]) cube([1.001,1.001,1]);
	translate([22,30,0]) cube([1.001,1.001,1]);
	translate([23,30,0]) cube([1.001,1.001,1]);
	translate([24,30,0]) cube([1.001,1.001,1]);
	translate([25,30,0]) cube([1.001,1.001,1]);
	translate([26,30,0]) cube([1.001,1.001,1]);
	translate([27,30,0]) cube([1.001,1.001,1]);
	translate([30,30,0]) cube([1.001,1.001,1]);
	translate([0,31,0]) cube([1.001,1.001,1]);
	translate([6,31,0]) cube([1.001,1.001,1]);
	translate([9,31,0]) cube([1.001,1.001,1]);
	translate([13,31,0]) cube([1.001,1.001,1]);
	translate([15,31,0]) cube([1.001,1.001,1]);
	translate([18,31,0]) cube([1.001,1.001,1]);
	translate([19,31,0]) cube([1.001,1.001,1]);
	translate([20,31,0]) cube([1.001,1.001,1]);
	translate([21,31,0]) cube([1.001,1.001,1]);
	translate([22,31,0]) cube([1.001,1.001,1]);
	translate([25,31,0]) cube([1.001,1.001,1]);
	translate([27,31,0]) cube([1.001,1.001,1]);
	translate([28,31,0]) cube([1.001,1.001,1]);
	translate([29,31,0]) cube([1.001,1.001,1]);
	translate([30,31,0]) cube([1.001,1.001,1]);
	translate([0,32,0]) cube([1.001,1.001,1]);
	translate([1,32,0]) cube([1.001,1.001,1]);
	translate([2,32,0]) cube([1.001,1.001,1]);
	translate([3,32,0]) cube([1.001,1.001,1]);
	translate([4,32,0]) cube([1.001,1.001,1]);
	translate([5,32,0]) cube([1.001,1.001,1]);
	translate([6,32,0]) cube([1.001,1.001,1]);
	translate([8,32,0]) cube([1.001,1.001,1]);
	translate([11,32,0]) cube([1.001,1.001,1]);
	translate([13,32,0]) cube([1.001,1.001,1]);
	translate([17,32,0]) cube([1.001,1.001,1]);
	translate([19,32,0]) cube([1.001,1.001,1]);
	translate([22,32,0]) cube([1.001,1.001,1]);
	translate([23,32,0]) cube([1.001,1.001,1]);
	translate([24,32,0]) cube([1.001,1.001,1]);
	translate([25,32,0]) cube([1.001,1.001,1]);
	translate([27,32,0]) cube([1.001,1.001,1]);
	translate([28,32,0]) cube([1.001,1.001,1]);
	translate([29,32,0]) cube([1.001,1.001,1]);
	translate([31,32,0]) cube([1.001,1.001,1]);
}

module back(tol=0.4, qr="y") {
	difference() {
		// the back design without removable floor
		plainback();

		// remove mounting/clean-out plate
		minkowski() {
			plate(tol);
			sphere(r=tol/2, center=true, $fn=8);
		}

		// remove the QR code from the back surface
		if (qr == "y") {
			translate([80,80, 0])
			rotate([0, 0, 45])
			scale([2,2,1])
			mirror([1, 1, 0])
			translate([33/2, -33/2, -0.5])
			scale([-1,1,2.5])
			qrcode();
		}	
	}
}

module assembled(tol=0.4) {
	// tolerance is gap for fitting plate
	union() {
		// each piece is defined in printing position,
		// but front() must be translated to make complete model
		translate([0,0,125]) front(tol, "y");
		back(tol, "y");
		plate(tol);
	}
}


module print_part() {
	if (part == "d") {
		decor();
	} else if (part == "f") {
		front(Micron_Gap / 100, "y");
	} else if (part == "g") {
		front(Micron_Gap / 100, "n");
	} else if (part == "b") {
		back(Micron_Gap / 100, "y");
	} else if (part == "c") {
		back(Micron_Gap / 100, "n");
	} else if (part == "p") {
		plate(Micron_Gap / 100);
	} else {
		assembled(Micron_Gap / 100);
	}
}

print_part();

