// stuff for Thingiverse Customizer
//---------------------------------------------
// (ms)
	TOF=637;	//[0, 106, 212, 318, 424, 531, 637]
// (mm)
	height=100;	//[10:200]
// (mm) - cross sectional width
	width=25;	//[5:50]
// (mm) - cross sectional thickness
	thickness=3;	//[1:10]

// Model smoothness - higher number = finer mesh. NB: compile time increases for finer meshes.
	smoothing=1*100;
// Scaling factor (change to suit no. of slices)
	gap=height/70;
//---------------------------------------------

// construction
//---------------------------------------------
module twisty(z, startRot, endRot) {
	rotate([0, 0, startRot])
	translate([0, 0, z])
		linear_extrude(gap, center=false, convexity=10, twist=-endRot, $fn=smoothing)
		translate([-width/2,-thickness/2,0])
		square([width,thickness],[0,0,0], center = false);
}

if (TOF==0)		{ss0();}		// code to make 0ms TOF spin spiral
if (TOF==106)	{ss106();}	// code to make 106ms TOF spin spiral
if (TOF==212)	{ss212();}	// code to make 212ms TOF spin spiral
if (TOF==318)	{ss318();}	// code to make 318ms TOF spin spiral
if (TOF==424)	{ss424();}	// code to make 424ms TOF spin spiral
if (TOF==531)	{ss531();}	// code to make 531ms TOF spin spiral
if (TOF==637)	{ss637();}	// code to make 637ms TOF spin spiral

module ss0(){
	twisty(0*gap, 0.65682, 0);
	twisty(1*gap, 0.65682, 0);
	twisty(2*gap, 0.65682, 0);
	twisty(3*gap, 0.65682, 0);
	twisty(4*gap, 0.65682, 0);
	twisty(5*gap, 0.65682, 0);
	twisty(6*gap, 0.65682, 0);
	twisty(7*gap, 0.65682, 0);
	twisty(8*gap, 0.65682, 0);
	twisty(9*gap, 0.65682, 0);
	twisty(10*gap, 0.65682, 0);
	twisty(11*gap, 0.65682, 0);
	twisty(12*gap, 0.65682, 0);
	twisty(13*gap, 0.65682, 0);
	twisty(14*gap, 0.65682, 0);
	twisty(15*gap, 0.65682, 0);
	twisty(16*gap, 0.65682, 0);
	twisty(17*gap, 0.65682, 0);
	twisty(18*gap, 0.65682, 0);
	twisty(19*gap, 0.65682, 0);
	twisty(20*gap, 0.65682, 0);
	twisty(21*gap, 0.65682, 0);
	twisty(22*gap, 0.65682, 0);
	twisty(23*gap, 0.65682, 0);
	twisty(24*gap, 0.65682, 0);
	twisty(25*gap, 0.65682, 0);
	twisty(26*gap, 0.65682, 0);
	twisty(27*gap, 0.65682, 0);
	twisty(28*gap, 0.65682, 0);
	twisty(29*gap, 0.65682, 0);
	twisty(30*gap, 0.65682, 0);
	twisty(31*gap, 0.65682, 0);
	twisty(32*gap, 0.65682, 0);
	twisty(33*gap, 0.65682, 0);
	twisty(34*gap, 0.65682, 0);
	twisty(35*gap, 0.65682, 0);
	twisty(36*gap, 0.65682, 0);
	twisty(37*gap, 0.65682, 0);
	twisty(38*gap, 0.65682, 0);
	twisty(39*gap, 0.65682, 0);
	twisty(40*gap, 0.65682, 0);
	twisty(41*gap, 0.65682, 0);
	twisty(42*gap, 0.65682, 0);
	twisty(43*gap, 0.65682, 0);
	twisty(44*gap, 0.65682, 0);
	twisty(45*gap, 0.65682, 0);
	twisty(46*gap, 0.65682, 0);
	twisty(47*gap, 0.65682, 0);
	twisty(48*gap, 0.65682, 0);
	twisty(49*gap, 0.65682, 0);
	twisty(50*gap, 0.65682, 0);
	twisty(51*gap, 0.65682, 0);
	twisty(52*gap, 0.65682, 0);
	twisty(53*gap, 0.65682, 0);
	twisty(54*gap, 0.65682, 0);
	twisty(55*gap, 0.65682, 0);
	twisty(56*gap, 0.65682, 0);
	twisty(57*gap, 0.65682, 0);
	twisty(58*gap, 0.65682, 0);
	twisty(59*gap, 0.65682, 0);
	twisty(60*gap, 0.65682, 0);
	twisty(61*gap, 0.65682, 0);
	twisty(62*gap, 0.65682, 0);
	twisty(63*gap, 0.65682, 0);
	twisty(64*gap, 0.65682, 0);
	twisty(65*gap, 0.65682, 0);
	twisty(66*gap, 0.65682, 0);
	twisty(67*gap, 0.65682, 0);
	twisty(68*gap, 0.65682, 0);
	twisty(69*gap, 0.65682, 0);
}

module ss106(){
	twisty(0*gap, 100.9225, -6.5724);
	twisty(1*gap, 94.3501, -6.8351);
	twisty(2*gap, 87.515, -5.9081);
	twisty(3*gap, 81.6069, -5.7814);
	twisty(4*gap, 75.8255, -5.842);
	twisty(5*gap, 69.9835, -4.784);
	twisty(6*gap, 65.1995, -5.3238);
	twisty(7*gap, 59.8757, -4.344);
	twisty(8*gap, 55.5317, -4.5582);
	twisty(9*gap, 50.9734, -3.1968);
	twisty(10*gap, 47.7767, -4.3859);
	twisty(11*gap, 43.3907, -2.9028);
	twisty(12*gap, 40.488, -3.5743);
	twisty(13*gap, 36.9137, -2.8174);
	twisty(14*gap, 34.0962, -3.0938);
	twisty(15*gap, 31.0024, -2.6776);
	twisty(16*gap, 28.3248, -2.6152);
	twisty(17*gap, 25.7096, -2.3976);
	twisty(18*gap, 23.312, -2.32);
	twisty(19*gap, 20.992, -2.2949);
	twisty(20*gap, 18.6971, -2.0243);
	twisty(21*gap, 16.6728, -1.809);
	twisty(22*gap, 14.8638, -1.409);
	twisty(23*gap, 13.4548, -1.3258);
	twisty(24*gap, 12.1291, -1.0511);
	twisty(25*gap, 11.078, -1.0219);
	twisty(26*gap, 10.056, -0.7889);
	twisty(27*gap, 9.2671, -0.98465);
	twisty(28*gap, 8.2825, -0.68507);
	twisty(29*gap, 7.5974, -0.85863);
	twisty(30*gap, 6.7388, -0.57001);
	twisty(31*gap, 6.1687, -0.32506);
	twisty(32*gap, 5.8437, -0.11691);
	twisty(33*gap, 5.7268, -0.019997);
	twisty(34*gap, 5.7068, 0.018391);
	twisty(35*gap, 5.7252, 0.0033564);
	twisty(36*gap, 5.7285, 0.00024796);
	twisty(37*gap, 5.7288, 0.12356);
	twisty(38*gap, 5.8523, 0.39576);
	twisty(39*gap, 6.2481, 0.68061);
	twisty(40*gap, 6.9287, 0.80957);
	twisty(41*gap, 7.7383, 0.76773);
	twisty(42*gap, 8.506, 0.70442);
	twisty(43*gap, 9.2104, 0.67585);
	twisty(44*gap, 9.8863, 1.1385);
	twisty(45*gap, 11.0248, 0.9914);
	twisty(46*gap, 12.0162, 1.4922);
	twisty(47*gap, 13.5084, 1.6346);
	twisty(48*gap, 15.143, 2.118);
	twisty(49*gap, 17.261, 2.1274);
	twisty(50*gap, 19.3884, 2.2488);
	twisty(51*gap, 21.6372, 2.1533);
	twisty(52*gap, 23.7905, 2.2934);
	twisty(53*gap, 26.0838, 2.4092);
	twisty(54*gap, 28.493, 2.8273);
	twisty(55*gap, 31.3203, 3.4099);
	twisty(56*gap, 34.7302, 3.4068);
	twisty(57*gap, 38.1371, 3.3389);
	twisty(58*gap, 41.4759, 2.8787);
	twisty(59*gap, 44.3546, 4.2377);
	twisty(60*gap, 48.5923, 3.7376);
	twisty(61*gap, 52.3299, 4.585);
	twisty(62*gap, 56.9149, 4.2973);
	twisty(63*gap, 61.2122, 5.105);
	twisty(64*gap, 66.3172, 5.0573);
	twisty(65*gap, 71.3746, 5.6611);
	twisty(66*gap, 77.0357, 5.8319);
	twisty(67*gap, 82.8676, 5.9736);
	twisty(68*gap, 88.8412, 6.7129);
	twisty(69*gap, 95.5541, 7.4932);
}

module ss212() {
	twisty(0*gap, 23.6094, -14.5732);
	twisty(1*gap, 9.0362, -14.2282);
	twisty(2*gap, 174.808, -12.0918);
	twisty(3*gap, 162.7162, -12.2621);
	twisty(4*gap, 150.4541, -12.2947);
	twisty(5*gap, 138.1594, -10.0621);
	twisty(6*gap, 128.0973, -9.7007);
	twisty(7*gap, 118.3965, -9.2874);
	twisty(8*gap, 109.1092, -8.5395);
	twisty(9*gap, 100.5697, -8.2132);
	twisty(10*gap, 92.3565, -7.6671);
	twisty(11*gap, 84.6894, -6.4841);
	twisty(12*gap, 78.2052, -6.0334);
	twisty(13*gap, 72.1718, -5.6749);
	twisty(14*gap, 66.497, -5.3794);
	twisty(15*gap, 61.1176, -5.1103);
	twisty(16*gap, 56.0073, -4.9509);
	twisty(17*gap, 51.0564, -4.7444);
	twisty(18*gap, 46.312, -4.2331);
	twisty(19*gap, 42.079, -3.6294);
	twisty(20*gap, 38.4495, -3.3244);
	twisty(21*gap, 35.1251, -3.1493);
	twisty(22*gap, 31.9759, -3.0946);
	twisty(23*gap, 28.8812, -3.0139);
	twisty(24*gap, 25.8673, -2.4352);
	twisty(25*gap, 23.4321, -2.161);
	twisty(26*gap, 21.2711, -1.5237);
	twisty(27*gap, 19.7473, -0.88393);
	twisty(28*gap, 18.8634, -0.25797);
	twisty(29*gap, 18.6054, 0.29803);
	twisty(30*gap, 18.9034, 0.30137);
	twisty(31*gap, 19.2048, -0.017858);
	twisty(32*gap, 19.187, -0.37196);
	twisty(33*gap, 18.815, -0.66857);
	twisty(34*gap, 18.1464, -1.037);
	twisty(35*gap, 17.1094, -0.95868);
	twisty(36*gap, 16.1507, -0.76437);
	twisty(37*gap, 15.3864, -0.29251);
	twisty(38*gap, 15.0939, -0.0078049);
	twisty(39*gap, 15.0861, 0.88926);
	twisty(40*gap, 15.9753, 1.1517);
	twisty(41*gap, 17.1271, 1.5466);
	twisty(42*gap, 18.6736, 1.5549);
	twisty(43*gap, 20.2286, 1.6326);
	twisty(44*gap, 21.8611, 1.9846);
	twisty(45*gap, 23.8457, 2.3038);
	twisty(46*gap, 26.1495, 2.5262);
	twisty(47*gap, 28.6757, 3.3675);
	twisty(48*gap, 32.0433, 3.4583);
	twisty(49*gap, 35.5015, 3.4791);
	twisty(50*gap, 38.9807, 3.9167);
	twisty(51*gap, 42.8974, 4.1289);
	twisty(52*gap, 47.0263, 4.3978);
	twisty(53*gap, 51.4241, 4.883);
	twisty(54*gap, 56.3071, 5.5378);
	twisty(55*gap, 61.8449, 5.7309);
	twisty(56*gap, 67.5758, 5.8227);
	twisty(57*gap, 73.3985, 6.0218);
	twisty(58*gap, 79.4202, 6.8313);
	twisty(59*gap, 86.2515, 7.4383);
	twisty(60*gap, 93.6899, 8.8892);
	twisty(61*gap, 102.5791, 8.9774);
	twisty(62*gap, 111.5564, 9.0448);
	twisty(63*gap, 120.6012, 9.9108);
	twisty(64*gap, 130.512, 10.4738);
	twisty(65*gap, 140.9858, 11.5213);
	twisty(66*gap, 152.5071, 12.5319);
	twisty(67*gap, 165.0389, 12.8985);
	twisty(68*gap, 177.9374, 13.0372);
	twisty(69*gap, 10.9746, 14.8551);
}

module ss318() {
	twisty(0*gap, 122.7645, -20.745);
	twisty(1*gap, 102.0195, -19.7331);
	twisty(2*gap, 82.2863, -19.3826);
	twisty(3*gap, 62.9037, -18.6445);
	twisty(4*gap, 44.2592, -17.3353);
	twisty(5*gap, 26.9239, -16.7383);
	twisty(6*gap, 10.1856, -15.7913);
	twisty(7*gap, 174.3943, -14.0087);
	twisty(8*gap, 160.3856, -12.6876);
	twisty(9*gap, 147.698, -12.1225);
	twisty(10*gap, 135.5755, -11.0811);
	twisty(11*gap, 124.4944, -10.1619);
	twisty(12*gap, 114.3325, -9.4143);
	twisty(13*gap, 104.9182, -8.395);
	twisty(14*gap, 96.5232, -7.9043);
	twisty(15*gap, 88.6189, -7.4694);
	twisty(16*gap, 81.1494, -6.4141);
	twisty(17*gap, 74.7353, -6.2934);
	twisty(18*gap, 68.4419, -5.8166);
	twisty(19*gap, 62.6254, -4.8511);
	twisty(20*gap, 57.7743, -4.6562);
	twisty(21*gap, 53.1181, -4.1846);
	twisty(22*gap, 48.9335, -3.6232);
	twisty(23*gap, 45.3103, -3.4762);
	twisty(24*gap, 41.8342, -3.0809);
	twisty(25*gap, 38.7532, -2.7969);
	twisty(26*gap, 35.9563, -2.5341);
	twisty(27*gap, 33.4222, -2.0436);
	twisty(28*gap, 31.3786, -1.8293);
	twisty(29*gap, 29.5492, -1.6536);
	twisty(30*gap, 27.8956, -1.4014);
	twisty(31*gap, 26.4942, -1.3052);
	twisty(32*gap, 25.1889, -1.0609);
	twisty(33*gap, 24.1281, -0.6338);
	twisty(34*gap, 23.4943, -0.15752);
	twisty(35*gap, 23.3368, 0.30366);
	twisty(36*gap, 23.6404, 0.68575);
	twisty(37*gap, 24.3262, 0.92719);
	twisty(38*gap, 25.2533, 1.235);
	twisty(39*gap, 26.4883, 1.3405);
	twisty(40*gap, 27.8288, 1.5966);
	twisty(41*gap, 29.4254, 1.8946);
	twisty(42*gap, 31.32, 2.1588);
	twisty(43*gap, 33.4788, 2.5915);
	twisty(44*gap, 36.0703, 2.9351);
	twisty(45*gap, 39.0054, 3.525);
	twisty(46*gap, 42.5304, 3.7883);
	twisty(47*gap, 46.3186, 3.4518);
	twisty(48*gap, 49.7704, 4.2636);
	twisty(49*gap, 54.034, 4.7265);
	twisty(50*gap, 58.7605, 5.1568);
	twisty(51*gap, 63.9172, 5.7915);
	twisty(52*gap, 69.7088, 5.9059);
	twisty(53*gap, 75.6147, 7.1516);
	twisty(54*gap, 82.7663, 7.4864);
	twisty(55*gap, 90.2528, 7.6939);
	twisty(56*gap, 97.9466, 8.9031);
	twisty(57*gap, 106.8497, 9.2803);
	twisty(58*gap, 116.13, 10.1886);
	twisty(59*gap, 126.3186, 11.0963);
	twisty(60*gap, 137.4149, 12.7477);
	twisty(61*gap, 150.1627, 12.1783);
	twisty(62*gap, 162.341, 14.4848);
	twisty(63*gap, 176.8258, 15.8987);
	twisty(64*gap, 12.7245, 17.6118);
	twisty(65*gap, 30.3363, 17.409);
	twisty(66*gap, 47.7453, 18.3198);
	twisty(67*gap, 66.0651, 19.812);
	twisty(68*gap, 85.8771, 19.875);
	twisty(69*gap, 105.7521, 20.8749);
}

module ss424() {
	twisty(0*gap, 36.0814, -26.2438);
	twisty(1*gap, 9.8375, -25.0567);
	twisty(2*gap, 164.7809, -24.8907);
	twisty(3*gap, 139.8902, -24.6622);
	twisty(4*gap, 115.2279, -23.7509);
	twisty(5*gap, 91.477, -22.0479);
	twisty(6*gap, 69.4292, -20.8809);
	twisty(7*gap, 48.5483, -19.6132);
	twisty(8*gap, 28.9351, -17.8016);
	twisty(9*gap, 11.1335, -16.6024);
	twisty(10*gap, 174.5311, -14.8924);
	twisty(11*gap, 159.6388, -13.0489);
	twisty(12*gap, 146.5898, -12.1734);
	twisty(13*gap, 134.4165, -11.2879);
	twisty(14*gap, 123.1285, -9.5542);
	twisty(15*gap, 113.5743, -9.0032);
	twisty(16*gap, 104.5711, -8.019);
	twisty(17*gap, 96.5521, -7.6703);
	twisty(18*gap, 88.8819, -6.5047);
	twisty(19*gap, 82.3771, -6.2855);
	twisty(20*gap, 76.0917, -5.1905);
	twisty(21*gap, 70.9012, -4.9441);
	twisty(22*gap, 65.957, -4.5211);
	twisty(23*gap, 61.436, -3.9673);
	twisty(24*gap, 57.4686, -3.737);
	twisty(25*gap, 53.7316, -3.1009);
	twisty(26*gap, 50.6307, -2.8303);
	twisty(27*gap, 47.8004, -2.2576);
	twisty(28*gap, 45.5428, -2.0096);
	twisty(29*gap, 43.5331, -1.5617);
	twisty(30*gap, 41.9714, -1.1456);
	twisty(31*gap, 40.8258, -0.595);
	twisty(32*gap, 40.2308, -0.23191);
	twisty(33*gap, 39.9989, -0.6186);
	twisty(34*gap, 39.3803, -0.4471);
	twisty(35*gap, 38.9332, 0.0059273);
	twisty(36*gap, 38.9391, 0.25812);
	twisty(37*gap, 39.1972, 0.76278);
	twisty(38*gap, 39.96, 1.1076);
	twisty(39*gap, 41.0676, 1.3672);
	twisty(40*gap, 42.4348, 1.7142);
	twisty(41*gap, 44.149, 1.7183);
	twisty(42*gap, 45.8674, 2.5637);
	twisty(43*gap, 48.431, 2.5541);
	twisty(44*gap, 50.9851, 3.1373);
	twisty(45*gap, 54.1224, 3.726);
	twisty(46*gap, 57.8483, 4.0061);
	twisty(47*gap, 61.8544, 4.6244);
	twisty(48*gap, 66.4789, 4.9502);
	twisty(49*gap, 71.4291, 6.1409);
	twisty(50*gap, 77.57, 6.1886);
	twisty(51*gap, 83.7586, 6.8306);
	twisty(52*gap, 90.5892, 7.4475);
	twisty(53*gap, 98.0367, 8.3377);
	twisty(54*gap, 106.3744, 8.8966);
	twisty(55*gap, 115.271, 9.9663);
	twisty(56*gap, 125.2373, 11.2267);
	twisty(57*gap, 136.464, 12.5325);
	twisty(58*gap, 148.9964, 13.7855);
	twisty(59*gap, 162.782, 14.8012);
	twisty(60*gap, 177.5832, 16.6134);
	twisty(61*gap, 14.1966, 18.1809);
	twisty(62*gap, 32.3775, 19.8819);
	twisty(63*gap, 52.2594, 21.4894);
	twisty(64*gap, 73.7488, 22.7906);
	twisty(65*gap, 96.5394, 23.6845);
	twisty(66*gap, 120.2239, 24.4939);
	twisty(67*gap, 144.7178, 24.8893);
	twisty(68*gap, 169.6071, 26.8724);
	twisty(69*gap, 16.4795, 27.3688);
}

module ss531() {
	twisty(0*gap, 133.2123, -35.3204);
	twisty(1*gap, 97.892, -30.7124);
	twisty(2*gap, 67.1796, -34.3672);
	twisty(3*gap, 32.8124, -32.0957);
	twisty(4*gap, 0.71667, -25.2654);
	twisty(5*gap, 155.4513, -28.9583);
	twisty(6*gap, 126.493, -27.4818);
	twisty(7*gap, 99.0112, -26.9662);
	twisty(8*gap, 72.045, -19.9623);
	twisty(9*gap, 52.0827, -18.8765);
	twisty(10*gap, 33.2063, -20.3055);
	twisty(11*gap, 12.9008, -19.1552);
	twisty(12*gap, 173.7456, -12.6241);
	twisty(13*gap, 161.1215, -15.0312);
	twisty(14*gap, 146.0903, -12.2565);
	twisty(15*gap, 133.8338, -8.3958);
	twisty(16*gap, 125.438, -10.4949);
	twisty(17*gap, 114.9432, -8.7997);
	twisty(18*gap, 106.1434, -6.0532);
	twisty(19*gap, 100.0902, -6.2286);
	twisty(20*gap, 93.8616, -6.6076);
	twisty(21*gap, 87.2539, -4.4607);
	twisty(22*gap, 82.7932, -3.6682);
	twisty(23*gap, 79.125, -5.201);
	twisty(24*gap, 73.924, -3.3424);
	twisty(25*gap, 70.5816, -2.6373);
	twisty(26*gap, 67.9443, -3.7192);
	twisty(27*gap, 64.2251, -2.5495);
	twisty(28*gap, 61.6756, -1.5647);
	twisty(29*gap, 60.111, -1.8651);
	twisty(30*gap, 58.2458, -1.1321);
	twisty(31*gap, 57.1137, -0.76749);
	twisty(32*gap, 56.3462, -0.72163);
	twisty(33*gap, 55.6246, -0.46171);
	twisty(34*gap, 55.1629, -0.0098167);
	twisty(35*gap, 55.153, 0.17708);
	twisty(36*gap, 55.3301, 0.66948);
	twisty(37*gap, 55.9996, 0.72048);
	twisty(38*gap, 56.7201, 0.79092);
	twisty(39*gap, 57.511, 1.5984);
	twisty(40*gap, 59.1094, 1.6974);
	twisty(41*gap, 60.8068, 1.8042);
	twisty(42*gap, 62.611, 2.8997);
	twisty(43*gap, 65.5106, 3.103);
	twisty(44*gap, 68.6136, 2.6345);
	twisty(45*gap, 71.2481, 3.3133);
	twisty(46*gap, 74.5614, 4.6242);
	twisty(47*gap, 79.1856, 4.0749);
	twisty(48*gap, 83.2605, 4.4873);
	twisty(49*gap, 87.7478, 7.2531);
	twisty(50*gap, 95.0009, 5.9826);
	twisty(51*gap, 100.9836, 5.7355);
	twisty(52*gap, 106.7191, 10.6401);
	twisty(53*gap, 117.3592, 9.2952);
	twisty(54*gap, 126.6545, 8.4043);
	twisty(55*gap, 135.0588, 14.7267);
	twisty(56*gap, 149.7855, 13.1583);
	twisty(57*gap, 162.9438, 12.8857);
	twisty(58*gap, 175.8295, 21.5623);
	twisty(59*gap, 17.3919, 18.4344);
	twisty(60*gap, 35.8263, 19.8356);
	twisty(61*gap, 55.6619, 23.8463);
	twisty(62*gap, 79.5082, 25.5917);
	twisty(63*gap, 105.0999, 29.1902);
	twisty(64*gap, 134.2901, 24.8601);
	twisty(65*gap, 159.1502, 28.9061);
	twisty(66*gap, 8.0563, 30.8383);
	twisty(67*gap, 38.8946, 29.3972);
	twisty(68*gap, 68.2918, 29.6249);
	twisty(69*gap, 97.9167, 40.88);
}

module ss637() {
	twisty(0*gap, 37.1758, -40.8087);
	twisty(1*gap, 176.3671, -39.5921);
	twisty(2*gap, 136.775, -38.3745);
	twisty(3*gap, 98.4005, -35.75);
	twisty(4*gap, 62.6505, -30.0796);
	twisty(5*gap, 32.5709, -37.2314);
	twisty(6*gap, 175.3395, -26.9527);
	twisty(7*gap, 148.3868, -34.9284);
	twisty(8*gap, 113.4584, -22.5564);
	twisty(9*gap, 90.902, -27.4215);
	twisty(10*gap, 63.4805, -23.3398);
	twisty(11*gap, 40.1407, -17.6227);
	twisty(12*gap, 22.518, -21.4098);
	twisty(13*gap, 1.1082, -14.0384);
	twisty(14*gap, 167.0698, -12.962);
	twisty(15*gap, 154.1077, -14.2127);
	twisty(16*gap, 139.8951, -8.5079);
	twisty(17*gap, 131.3872, -8.2379);
	twisty(18*gap, 123.1493, -8.8662);
	twisty(19*gap, 114.2831, -5.476);
	twisty(20*gap, 108.8071, -5.1245);
	twisty(21*gap, 103.6827, -5.9005);
	twisty(22*gap, 97.7822, -3.6157);
	twisty(23*gap, 94.1665, -3.1967);
	twisty(24*gap, 90.9698, -3.6855);
	twisty(25*gap, 87.2842, -2.456);
	twisty(26*gap, 84.8282, -1.9568);
	twisty(27*gap, 82.8714, -2.1276);
	twisty(28*gap, 80.7438, -1.4333);
	twisty(29*gap, 79.3106, -0.89964);
	twisty(30*gap, 78.4109, -0.54429);
	twisty(31*gap, 77.8666, -0.10454);
	twisty(32*gap, 77.7621, 0.27512);
	twisty(33*gap, 78.0372, 0.51309);
	twisty(34*gap, 78.5503, 0.71578);
	twisty(35*gap, 79.2661, 0.10926);
	twisty(36*gap, 79.3754, -0.40282);
	twisty(37*gap, 78.9725, -0.65959);
	twisty(38*gap, 78.3129, -0.10884);
	twisty(39*gap, 78.2041, 0.24708);
	twisty(40*gap, 78.4512, 0.9412);
	twisty(41*gap, 79.3924, 1.3224);
	twisty(42*gap, 80.7148, 1.5438);
	twisty(43*gap, 82.2586, 2.8108);
	twisty(44*gap, 85.0694, 2.5454);
	twisty(45*gap, 87.6148, 2.5054);
	twisty(46*gap, 90.1202, 4.5292);
	twisty(47*gap, 94.6494, 4.3127);
	twisty(48*gap, 98.9621, 4.1898);
	twisty(49*gap, 103.1519, 7.1191);
	twisty(50*gap, 110.271, 6.5531);
	twisty(51*gap, 116.8241, 6.1965);
	twisty(52*gap, 123.0206, 10.9753);
	twisty(53*gap, 133.9959, 10.4758);
	twisty(54*gap, 144.4717, 9.6955);
	twisty(55*gap, 154.1672, 16.8399);
	twisty(56*gap, 171.0071, 15.803);
	twisty(57*gap, 6.8101, 14.8699);
	twisty(58*gap, 21.68, 27.2582);
	twisty(59*gap, 48.9382, 19.9146);
	twisty(60*gap, 68.8528, 26.136);
	twisty(61*gap, 94.9888, 28.8152);
	twisty(62*gap, 123.804, 23.8795);
	twisty(63*gap, 147.6835, 37.4821);
	twisty(64*gap, 5.1655, 27.7382);
	twisty(65*gap, 32.9037, 39.1008);
	twisty(66*gap, 72.0045, 32.5797);
	twisty(67*gap, 104.5842, 41.7564);
	twisty(68*gap, 146.3406, 36.6404);
	twisty(69*gap, 2.981, 45.678);
}

//---------------------------------------------