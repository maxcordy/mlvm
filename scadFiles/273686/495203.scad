// Customizable Router Engraved Plaque

/* [Plaque] */

// If you choose to use a custom plaque shape, the plaque size applies to the sides of the draw box; the actual plaque dimensions may differ. For a square plaque, this sets the length of each side.
plaque_size = 100;

plaque_thickness = 5;

plaque_shape = 1; // [0:Square, 1:Custom]

// Hit Clear then click and drag to create a custom plaque shape. Used only if Custom plaque shape is selected above.
custom_plaque_shape = [[[-0.4, 0.5], [0.4, 0.5], [0.4, -0.1], [0.3, -0.3], [0, -0.4], [-0.3, -0.3], [-0.4, -0.1]], [[0, 1, 2, 3, 4, 5, 6]]]; // [draw_polygon]

/* [Bit] */

// Router bit radius (size of router bit draw box). A bit that extends the full height of the draw box will cut this deep into the plaque.
bit_size = 4;

// Cross section of router bit. The bit is formed by rotating the cross section around the left edge of the drawing as if on a lathe. The top edge of the drawing will be flush with the top of the plaque; be sure to leave no white space above the top of your bit profile.
router_bit = [[[0.1, 0.5], [0, 0.4], [-0.1, 0.2], [-0.1, 0], [-0.2, -0.2], [-0.4, -0.3], [-0.5, -0.3], [-0.5, 0.5]], [[0, 1, 2, 3, 4, 5, 6, 7]]]; // [draw_polygon]

/* [Path] */

// Router follows path from first to last point of each shape drawn here here. The last connecting segment is ignored. Because this widget is intended for drawing closed polygons, not lines, some creative experimentation may be required to approximate the desired path.
router_path = [[[-0.09178082191780822,-0.2821917808219178],[-0.10273972602739725,-0.273972602739726],[-0.13561643835616438,-0.25205479452054796],[-0.14657534246575343,-0.24383561643835616],[-0.1821917808219178,-0.21643835616438356],[-0.19041095890410958,-0.2054794520547945],[-0.22054794520547946,-0.14246575342465753],[-0.2232876712328767,-0.12602739726027398],[-0.22876712328767124,-0.11232876712328767],[-0.2452054794520548,-0.0410958904109589],[-0.2589041095890411,0.005479452054794521],[-0.26164383561643834,0.019178082191780823],[-0.27534246575342464,0.057534246575342465],[-0.28356164383561644,0.10136986301369863],[-0.28356164383561644,0.11506849315068493],[-0.2808219178082192,0.14246575342465753],[-0.26986301369863014,0.15616438356164383],[-0.23972602739726026,0.14794520547945206],[-0.22602739726027396,0.13424657534246576],[-0.21232876712328766,0.10410958904109589],[-0.21232876712328766,0.09041095890410959],[-0.21232876712328766,0.0684931506849315],[-0.20684931506849316,0.03561643835616438],[-0.20136986301369864,0.021917808219178082],[-0.1821917808219178,0],[-0.15753424657534246,-0.01643835616438356],[-0.14657534246575343,-0.024657534246575342],[-0.13013698630136986,-0.024657534246575342],[-0.11095890410958904,0.01643835616438356],[-0.10821917808219178,0.030136986301369864],[-0.10547945205479452,0.07397260273972603],[-0.10273972602739725,0.08767123287671233],[-0.10273972602739725,0.1178082191780822],[-0.10273972602739725,0.13150684931506848],[-0.09452054794520548,0.1780821917808219],[-0.09452054794520548,0.1917808219178082],[-0.09452054794520548,0.2054794520547945],[-0.09452054794520548,0.2328767123287671],[-0.09452054794520548,0.2465753424657534],[-0.09452054794520548,0.27123287671232876],[-0.09726027397260274,0.28493150684931506],[-0.09726027397260274,0.31232876712328766],[-0.09726027397260274,0.32602739726027397],[-0.09726027397260274,0.34794520547945207],[-0.08904109589041095,0.3780821917808219],[-0.08082191780821918,0.3917808219178082],[-0.06986301369863014,0.40273972602739727],[-0.0589041095890411,0.4136986301369863],[-0.045205479452054796,0.410958904109589],[-0.031506849315068496,0.39452054794520547],[-0.028767123287671233,0.36712328767123287],[-0.028767123287671233,0.35342465753424657],[-0.028767123287671233,0.3287671232876712],[-0.03424657534246575,0.2876712328767123],[-0.036986301369863014,0.27123287671232876],[-0.036986301369863014,0.24383561643835616],[-0.036986301369863014,0.23013698630136986],[-0.036986301369863014,0.2054794520547945],[-0.036986301369863014,0.1917808219178082],[-0.036986301369863014,0.1917808219178082],[-0.03424657534246575,0.15342465753424658],[-0.031506849315068496,0.13972602739726028],[-0.028767123287671233,0.1095890410958904],[-0.015068493150684932,0.1178082191780822],[-0.0013698630136986301,0.136986301369863],[-0.0013698630136986301,0.18082191780821918],[-0.0013698630136986301,0.19452054794520549],[0.0013698630136986301,0.20821917808219179],[0.015068493150684932,0.25753424657534246],[0.01780821917808219,0.27123287671232876],[0.02054794520547945,0.2958904109589041],[0.023287671232876714,0.336986301369863],[0.023287671232876714,0.35342465753424657],[0.028767123287671233,0.3863013698630137],[0.03424657534246575,0.4],[0.03972602739726028,0.4191780821917808],[0.04794520547945205,0.4301369863013699],[0.06164383561643835,0.4328767123287671],[0.07534246575342465,0.4301369863013699],[0.09452054794520548,0.40273972602739727],[0.1,0.36712328767123287],[0.10273972602739725,0.35342465753424657],[0.10273972602739725,0.3178082191780822],[0.09726027397260274,0.27945205479452057],[0.08904109589041095,0.26575342465753427],[0.08082191780821918,0.23835616438356164],[0.07260273972602739,0.19726027397260273],[0.07260273972602739,0.19726027397260273],[0.06712328767123288,0.1589041095890411],[0.06438356164383562,0.14520547945205478],[0.06438356164383562,0.14520547945205478],[0.06164383561643835,0.11506849315068493],[0.06164383561643835,0.10136986301369863],[0.07534246575342465,0.10684931506849316],[0.08356164383561644,0.1178082191780822],[0.09726027397260274,0.15342465753424658],[0.1,0.16986301369863013],[0.10821917808219178,0.2136986301369863],[0.11095890410958904,0.2273972602739726],[0.12191780821917808,0.26575342465753427],[0.1273972602739726,0.3150684931506849],[0.13561643835616438,0.34794520547945207],[0.1410958904109589,0.3698630136986301],[0.14931506849315068,0.38082191780821917],[0.16301369863013698,0.3835616438356164],[0.17945205479452056,0.3863013698630137],[0.20136986301369864,0.37534246575342467],[0.20684931506849316,0.3452054794520548],[0.20410958904109588,0.3315068493150685],[0.20136986301369864,0.29863013698630136],[0.19315068493150686,0.2602739726027397],[0.19315068493150686,0.2465753424657534],[0.19315068493150686,0.2465753424657534],[0.18767123287671234,0.2191780821917808],[0.1821917808219178,0.2054794520547945],[0.17945205479452056,0.1917808219178082],[0.1684931506849315,0.16986301369863013],[0.1684931506849315,0.16986301369863013],[0.1547945205479452,0.13150684931506848],[0.14931506849315068,0.1178082191780822],[0.14931506849315068,0.1178082191780822],[0.14931506849315068,0.09315068493150686],[0.15205479452054796,0.07123287671232877],[0.17671232876712328,0.07945205479452055],[0.1821917808219178,0.0958904109589041],[0.19041095890410958,0.14246575342465753],[0.1958904109589041,0.15616438356164383],[0.2095890410958904,0.2054794520547945],[0.21232876712328766,0.2191780821917808],[0.21780821917808219,0.2547945205479452],[0.21780821917808219,0.2684931506849315],[0.21780821917808219,0.2876712328767123],[0.21780821917808219,0.3013698630136986],[0.22602739726027396,0.32054794520547947],[0.2452054794520548,0.32602739726027397],[0.26438356164383564,0.30684931506849317],[0.2671232876712329,0.29041095890410956],[0.2726027397260274,0.2602739726027397],[0.2726027397260274,0.2465753424657534],[0.2726027397260274,0.2219178082191781],[0.2726027397260274,0.20821917808219179],[0.2726027397260274,0.17534246575342466],[0.2726027397260274,0.16164383561643836],[0.2726027397260274,0.16164383561643836],[0.26164383561643834,0.12602739726027398],[0.26164383561643834,0.12602739726027398],[0.25616438356164384,0.11232876712328767],[0.25616438356164384,0.11232876712328767],[0.2452054794520548,0.07945205479452055],[0.2452054794520548,0.07945205479452055],[0.23972602739726026,0.0410958904109589],[0.23972602739726026,0.0410958904109589],[0.236986301369863,0.0273972602739726],[0.236986301369863,0.0273972602739726],[0.22876712328767124,-0.0027397260273972603],[0.22876712328767124,-0.0027397260273972603],[0.22876712328767124,-0.01643835616438356],[0.22876712328767124,-0.01643835616438356],[0.21780821917808219,-0.0410958904109589],[0.21780821917808219,-0.0410958904109589],[0.20684931506849316,-0.07945205479452055],[0.20684931506849316,-0.07945205479452055],[0.20410958904109588,-0.09315068493150686],[0.20410958904109588,-0.09315068493150686],[0.1958904109589041,-0.13424657534246576],[0.1958904109589041,-0.13424657534246576],[0.19315068493150686,-0.1589041095890411],[0.19315068493150686,-0.1589041095890411],[0.19041095890410958,-0.2],[0.19041095890410958,-0.2],[0.18767123287671234,-0.2136986301369863],[0.18767123287671234,-0.2136986301369863],[0.17945205479452056,-0.23835616438356164],[0.17945205479452056,-0.23835616438356164],[0.15753424657534246,-0.2684931506849315],[0.14657534246575343,-0.27671232876712326],[0.13287671232876713,-0.2876712328767123],[0.11095890410958904,-0.2958904109589041],[0.08904109589041095,-0.2876712328767123],[0.06164383561643835,-0.27945205479452057],[0.04794520547945205,-0.27945205479452057],[0.04794520547945205,-0.27945205479452057],[0.03424657534246575,-0.28493150684931506],[0.03424657534246575,-0.28493150684931506],[0.02054794520547945,-0.2876712328767123],[0.02054794520547945,-0.2876712328767123],[0.00684931506849315,-0.29041095890410956],[0.00684931506849315,-0.29041095890410956],[-0.00684931506849315,-0.29315068493150687],[-0.07808219178082192,-0.29041095890410956]],[[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189]]]; // [draw_polygon]

// The engraving is made by subtracting the trench from the plaque.
difference() {
	Plaque();
	Trench();
}

// This module models the path cut by the router as a solid object.
// The bit is positioned at each point in the path; the shape of
// each segment is obtained by taking the convex hull of each
// successive bit pair; and the results are all unioned together.
module Trench() {
	union() {

		// Process each part of the path drawing as a separate (unconnected) path
		for (path_part = router_path[1]) {

			// Process each segment of this path by stepping through each point pair
			for (point_index = [0:len(path_part) - 2]) {
				
				// The convex hull of the bit at this point and the next point
				// is the shape of trench segment cut by the bit between these points.
				hull() {
					
					// An instance of the bit at this point...
					translate([
							plaque_size * router_path[0][path_part[point_index]][0],
							plaque_size * router_path[0][path_part[point_index]][1],
							0])
					Bit();

					// ...and an instance of the bit at the next point.
					translate([
							plaque_size * router_path[0][path_part[point_index + 1]][0],
							plaque_size * router_path[0][path_part[point_index + 1]][1],
							0])
					Bit();
				}
			}
		}
	}
}

// Plaque as in a tablet to be engraved, not a dental malady
module Plaque() {
	if (plaque_shape == 0) {
		
		// Plain square plaque.
		translate([0, 0, plaque_thickness/2])
		cube([plaque_size, plaque_size, plaque_thickness], center=true);
	
	} else {
	
		// Custom plaque shape extruded from outline.
		scale([plaque_size, plaque_size, 1])
		linear_extrude(height=plaque_thickness, center=false)
		polygon(points=custom_plaque_shape[0], paths=custom_plaque_shape[1]);
	}
}

module Bit() {
	
	// 4. Adjust size and position to match up with plaque
	translate([0, 0, plaque_thickness - (bit_size/2)])
	scale([bit_size, bit_size, bit_size])
	
	// 3. Create the 3D bit shape
	rotate_extrude($fn=12)
	
	// 2. Align left edge with lathe axis
	translate([0.5, 0, 0])
	
	// 1. Clip the bit cross section drawing to the allowed extent.
	projection(cut=false)
	intersection() {
		
		// Extrude the cross section into a block...
		linear_extrude(height=1, center=true)
		polygon(points=router_bit[0], paths=router_bit[1]);
		
		// ...and intersect it with the unit cube to trim any out-of-bounds parts.
		cube([1, 1, 1], center=true);
	}
}

